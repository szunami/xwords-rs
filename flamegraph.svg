<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>core::ptr::drop_in_place (9 samples, 1.86%)</title><rect x="1.0331%" y="277" width="1.8595%" height="15" fill="rgb(227,0,7)"/><text x="1.2831%" y="287.50">c..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.86%)</title><rect x="1.0331%" y="261" width="1.8595%" height="15" fill="rgb(217,0,24)"/><text x="1.2831%" y="271.50">&lt;..</text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (9 samples, 1.86%)</title><rect x="1.0331%" y="245" width="1.8595%" height="15" fill="rgb(221,193,54)"/><text x="1.2831%" y="255.50">s..</text></g><g><title>std::sys::unix::mutex::Mutex::unlock (9 samples, 1.86%)</title><rect x="1.0331%" y="229" width="1.8595%" height="15" fill="rgb(248,212,6)"/><text x="1.2831%" y="239.50">s..</text></g><g><title>__pthread_mutex_unlock_usercnt (8 samples, 1.65%)</title><rect x="1.2397%" y="213" width="1.6529%" height="15" fill="rgb(208,68,35)"/><text x="1.4897%" y="223.50"></text></g><g><title>__lll_unlock_wake (8 samples, 1.65%)</title><rect x="1.2397%" y="197" width="1.6529%" height="15" fill="rgb(232,128,0)"/><text x="1.4897%" y="207.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (5 samples, 1.03%)</title><rect x="2.8926%" y="277" width="1.0331%" height="15" fill="rgb(207,160,47)"/><text x="3.1426%" y="287.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (5 samples, 1.03%)</title><rect x="2.8926%" y="261" width="1.0331%" height="15" fill="rgb(228,23,34)"/><text x="3.1426%" y="271.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (5 samples, 1.03%)</title><rect x="2.8926%" y="245" width="1.0331%" height="15" fill="rgb(218,30,26)"/><text x="3.1426%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (5 samples, 1.03%)</title><rect x="2.8926%" y="229" width="1.0331%" height="15" fill="rgb(220,122,19)"/><text x="3.1426%" y="239.50"></text></g><g><title>__lll_lock_wait (5 samples, 1.03%)</title><rect x="2.8926%" y="213" width="1.0331%" height="15" fill="rgb(250,228,42)"/><text x="3.1426%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.21%)</title><rect x="3.9256%" y="165" width="0.2066%" height="15" fill="rgb(240,193,28)"/><text x="4.1756%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.21%)</title><rect x="3.9256%" y="149" width="0.2066%" height="15" fill="rgb(216,20,37)"/><text x="4.1756%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.21%)</title><rect x="3.9256%" y="133" width="0.2066%" height="15" fill="rgb(206,188,39)"/><text x="4.1756%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.21%)</title><rect x="3.9256%" y="117" width="0.2066%" height="15" fill="rgb(217,207,13)"/><text x="4.1756%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.62%)</title><rect x="3.9256%" y="181" width="0.6198%" height="15" fill="rgb(231,73,38)"/><text x="4.1756%" y="191.50"></text></g><g><title>&lt;xwords_rs::Crossword as core::hash::Hash&gt;::hash (2 samples, 0.41%)</title><rect x="4.1322%" y="165" width="0.4132%" height="15" fill="rgb(225,20,46)"/><text x="4.3822%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.41%)</title><rect x="4.1322%" y="149" width="0.4132%" height="15" fill="rgb(210,31,41)"/><text x="4.3822%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.41%)</title><rect x="4.1322%" y="133" width="0.4132%" height="15" fill="rgb(221,200,47)"/><text x="4.3822%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.41%)</title><rect x="4.1322%" y="117" width="0.4132%" height="15" fill="rgb(226,26,5)"/><text x="4.3822%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.41%)</title><rect x="4.1322%" y="101" width="0.4132%" height="15" fill="rgb(249,33,26)"/><text x="4.3822%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.41%)</title><rect x="4.1322%" y="85" width="0.4132%" height="15" fill="rgb(235,183,28)"/><text x="4.3822%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.41%)</title><rect x="4.1322%" y="69" width="0.4132%" height="15" fill="rgb(221,5,38)"/><text x="4.3822%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.41%)</title><rect x="4.1322%" y="53" width="0.4132%" height="15" fill="rgb(247,18,42)"/><text x="4.3822%" y="63.50"></text></g><g><title>xwords_rs::CrosswordFillState::add_candidate (4 samples, 0.83%)</title><rect x="3.9256%" y="277" width="0.8264%" height="15" fill="rgb(241,131,45)"/><text x="4.1756%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.83%)</title><rect x="3.9256%" y="261" width="0.8264%" height="15" fill="rgb(249,31,29)"/><text x="4.1756%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.83%)</title><rect x="3.9256%" y="245" width="0.8264%" height="15" fill="rgb(225,111,53)"/><text x="4.1756%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.83%)</title><rect x="3.9256%" y="229" width="0.8264%" height="15" fill="rgb(238,160,17)"/><text x="4.1756%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.83%)</title><rect x="3.9256%" y="213" width="0.8264%" height="15" fill="rgb(214,148,48)"/><text x="4.1756%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (4 samples, 0.83%)</title><rect x="3.9256%" y="197" width="0.8264%" height="15" fill="rgb(232,36,49)"/><text x="4.1756%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.21%)</title><rect x="4.5455%" y="181" width="0.2066%" height="15" fill="rgb(209,103,24)"/><text x="4.7955%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.21%)</title><rect x="4.5455%" y="165" width="0.2066%" height="15" fill="rgb(229,88,8)"/><text x="4.7955%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.21%)</title><rect x="4.5455%" y="149" width="0.2066%" height="15" fill="rgb(213,181,19)"/><text x="4.7955%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.21%)</title><rect x="4.5455%" y="133" width="0.2066%" height="15" fill="rgb(254,191,54)"/><text x="4.7955%" y="143.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.21%)</title><rect x="7.2314%" y="261" width="0.2066%" height="15" fill="rgb(241,83,37)"/><text x="7.4814%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.21%)</title><rect x="11.5702%" y="165" width="0.2066%" height="15" fill="rgb(233,36,39)"/><text x="11.8202%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::add (11 samples, 2.27%)</title><rect x="11.7769%" y="165" width="2.2727%" height="15" fill="rgb(226,3,54)"/><text x="12.0269%" y="175.50">h..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 1.03%)</title><rect x="13.0165%" y="149" width="1.0331%" height="15" fill="rgb(245,192,40)"/><text x="13.2665%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.62%)</title><rect x="13.4298%" y="133" width="0.6198%" height="15" fill="rgb(238,167,29)"/><text x="13.6798%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 1.65%)</title><rect x="14.0496%" y="165" width="1.6529%" height="15" fill="rgb(232,182,51)"/><text x="14.2996%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (1 samples, 0.21%)</title><rect x="15.4959%" y="149" width="0.2066%" height="15" fill="rgb(231,60,39)"/><text x="15.7459%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.21%)</title><rect x="15.7025%" y="165" width="0.2066%" height="15" fill="rgb(208,69,12)"/><text x="15.9525%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 6.82%)</title><rect x="9.7107%" y="197" width="6.8182%" height="15" fill="rgb(235,93,37)"/><text x="9.9607%" y="207.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 6.40%)</title><rect x="10.1240%" y="181" width="6.4050%" height="15" fill="rgb(213,116,39)"/><text x="10.3740%" y="191.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.62%)</title><rect x="15.9091%" y="165" width="0.6198%" height="15" fill="rgb(222,207,29)"/><text x="16.1591%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.62%)</title><rect x="15.9091%" y="149" width="0.6198%" height="15" fill="rgb(206,96,30)"/><text x="16.1591%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.21%)</title><rect x="16.3223%" y="133" width="0.2066%" height="15" fill="rgb(218,138,4)"/><text x="16.5723%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.62%)</title><rect x="19.6281%" y="149" width="0.6198%" height="15" fill="rgb(250,191,14)"/><text x="19.8781%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 11.98%)</title><rect x="8.4711%" y="229" width="11.9835%" height="15" fill="rgb(239,60,40)"/><text x="8.7211%" y="239.50">&lt;std::collections:..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 11.57%)</title><rect x="8.8843%" y="213" width="11.5702%" height="15" fill="rgb(206,27,48)"/><text x="9.1343%" y="223.50">&lt;hashbrown::map::..</text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 3.93%)</title><rect x="16.5289%" y="197" width="3.9256%" height="15" fill="rgb(225,35,8)"/><text x="16.7789%" y="207.50">core..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (10 samples, 2.07%)</title><rect x="18.3884%" y="181" width="2.0661%" height="15" fill="rgb(250,213,24)"/><text x="18.6384%" y="191.50">&lt;..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (6 samples, 1.24%)</title><rect x="19.2149%" y="165" width="1.2397%" height="15" fill="rgb(247,123,22)"/><text x="19.4649%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr/core::mem::size_of (1 samples, 0.21%)</title><rect x="20.2479%" y="149" width="0.2066%" height="15" fill="rgb(231,138,38)"/><text x="20.4979%" y="159.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 13.43%)</title><rect x="7.4380%" y="261" width="13.4298%" height="15" fill="rgb(231,145,46)"/><text x="7.6880%" y="271.50">&lt;std::collections::h..</text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 12.81%)</title><rect x="8.0579%" y="245" width="12.8099%" height="15" fill="rgb(251,118,11)"/><text x="8.3079%" y="255.50">&lt;std::collections::..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.41%)</title><rect x="20.4545%" y="229" width="0.4132%" height="15" fill="rgb(217,147,25)"/><text x="20.7045%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.21%)</title><rect x="20.6612%" y="213" width="0.2066%" height="15" fill="rgb(247,81,37)"/><text x="20.9112%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="21.6942%" y="229" width="0.2066%" height="15" fill="rgb(209,12,38)"/><text x="21.9442%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.21%)</title><rect x="21.6942%" y="213" width="0.2066%" height="15" fill="rgb(227,1,9)"/><text x="21.9442%" y="223.50"></text></g><g><title>alloc::string::String::as_bytes (6 samples, 1.24%)</title><rect x="20.8678%" y="261" width="1.2397%" height="15" fill="rgb(248,47,43)"/><text x="21.1178%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.83%)</title><rect x="21.2810%" y="245" width="0.8264%" height="15" fill="rgb(221,10,30)"/><text x="21.5310%" y="255.50"></text></g><g><title>core::slice::from_raw_parts (1 samples, 0.21%)</title><rect x="21.9008%" y="229" width="0.2066%" height="15" fill="rgb(210,229,1)"/><text x="22.1508%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.21%)</title><rect x="21.9008%" y="213" width="0.2066%" height="15" fill="rgb(222,148,37)"/><text x="22.1508%" y="223.50"></text></g><g><title>alloc::string::String::len (6 samples, 1.24%)</title><rect x="22.1074%" y="261" width="1.2397%" height="15" fill="rgb(234,67,33)"/><text x="22.3574%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::len (5 samples, 1.03%)</title><rect x="22.3140%" y="245" width="1.0331%" height="15" fill="rgb(247,98,35)"/><text x="22.5640%" y="255.50"></text></g><g><title>xwords_rs::find_fills (92 samples, 19.01%)</title><rect x="4.7521%" y="277" width="19.0083%" height="15" fill="rgb(247,138,52)"/><text x="5.0021%" y="287.50">xwords_rs::find_fills</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.41%)</title><rect x="23.3471%" y="261" width="0.4132%" height="15" fill="rgb(213,79,30)"/><text x="23.5971%" y="271.50"></text></g><g><title>core::mem::replace (1 samples, 0.21%)</title><rect x="23.5537%" y="245" width="0.2066%" height="15" fill="rgb(246,177,23)"/><text x="23.8037%" y="255.50"></text></g><g><title>core::mem::swap (1 samples, 0.21%)</title><rect x="23.5537%" y="229" width="0.2066%" height="15" fill="rgb(230,62,27)"/><text x="23.8037%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.21%)</title><rect x="23.5537%" y="213" width="0.2066%" height="15" fill="rgb(216,154,8)"/><text x="23.8037%" y="223.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="23.7603%" y="261" width="0.4132%" height="15" fill="rgb(244,35,45)"/><text x="24.0103%" y="271.50"></text></g><g><title>core::ptr::read/core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init/core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (2 samples, 0.41%)</title><rect x="23.7603%" y="245" width="0.4132%" height="15" fill="rgb(251,115,12)"/><text x="24.0103%" y="255.50"></text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.21%)</title><rect x="24.1736%" y="261" width="0.2066%" height="15" fill="rgb(240,54,50)"/><text x="24.4236%" y="271.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.21%)</title><rect x="24.1736%" y="245" width="0.2066%" height="15" fill="rgb(233,84,52)"/><text x="24.4236%" y="255.50"></text></g><g><title>std::sync::once::Once::is_completed (1 samples, 0.21%)</title><rect x="24.1736%" y="229" width="0.2066%" height="15" fill="rgb(207,117,47)"/><text x="24.4236%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.21%)</title><rect x="24.1736%" y="213" width="0.2066%" height="15" fill="rgb(249,43,39)"/><text x="24.4236%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="24.1736%" y="197" width="0.2066%" height="15" fill="rgb(209,38,44)"/><text x="24.4236%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.21%)</title><rect x="24.3802%" y="261" width="0.2066%" height="15" fill="rgb(236,212,23)"/><text x="24.6302%" y="271.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (1 samples, 0.21%)</title><rect x="24.3802%" y="245" width="0.2066%" height="15" fill="rgb(242,79,21)"/><text x="24.6302%" y="255.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.21%)</title><rect x="24.3802%" y="229" width="0.2066%" height="15" fill="rgb(211,96,35)"/><text x="24.6302%" y="239.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.21%)</title><rect x="24.3802%" y="213" width="0.2066%" height="15" fill="rgb(253,215,40)"/><text x="24.6302%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.21%)</title><rect x="24.3802%" y="197" width="0.2066%" height="15" fill="rgb(211,81,21)"/><text x="24.6302%" y="207.50"></text></g><g><title>core::mem::replace (1 samples, 0.21%)</title><rect x="24.3802%" y="181" width="0.2066%" height="15" fill="rgb(208,190,38)"/><text x="24.6302%" y="191.50"></text></g><g><title>core::mem::swap (1 samples, 0.21%)</title><rect x="24.3802%" y="165" width="0.2066%" height="15" fill="rgb(235,213,38)"/><text x="24.6302%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.21%)</title><rect x="24.5868%" y="117" width="0.2066%" height="15" fill="rgb(237,122,38)"/><text x="24.8368%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.41%)</title><rect x="24.5868%" y="181" width="0.4132%" height="15" fill="rgb(244,218,35)"/><text x="24.8368%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="24.5868%" y="165" width="0.4132%" height="15" fill="rgb(240,68,47)"/><text x="24.8368%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="24.5868%" y="149" width="0.4132%" height="15" fill="rgb(210,16,53)"/><text x="24.8368%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="24.5868%" y="133" width="0.4132%" height="15" fill="rgb(235,124,12)"/><text x="24.8368%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.21%)</title><rect x="24.7934%" y="117" width="0.2066%" height="15" fill="rgb(224,169,11)"/><text x="25.0434%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.21%)</title><rect x="25.0000%" y="165" width="0.2066%" height="15" fill="rgb(250,166,2)"/><text x="25.2500%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.21%)</title><rect x="25.0000%" y="149" width="0.2066%" height="15" fill="rgb(242,216,29)"/><text x="25.2500%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.21%)</title><rect x="25.0000%" y="133" width="0.2066%" height="15" fill="rgb(230,116,27)"/><text x="25.2500%" y="143.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.21%)</title><rect x="25.0000%" y="117" width="0.2066%" height="15" fill="rgb(228,99,48)"/><text x="25.2500%" y="127.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.83%)</title><rect x="24.5868%" y="261" width="0.8264%" height="15" fill="rgb(253,11,6)"/><text x="24.8368%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.83%)</title><rect x="24.5868%" y="245" width="0.8264%" height="15" fill="rgb(247,143,39)"/><text x="24.8368%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.83%)</title><rect x="24.5868%" y="229" width="0.8264%" height="15" fill="rgb(236,97,10)"/><text x="24.8368%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.83%)</title><rect x="24.5868%" y="213" width="0.8264%" height="15" fill="rgb(233,208,19)"/><text x="24.8368%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (4 samples, 0.83%)</title><rect x="24.5868%" y="197" width="0.8264%" height="15" fill="rgb(216,164,2)"/><text x="24.8368%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.41%)</title><rect x="25.0000%" y="181" width="0.4132%" height="15" fill="rgb(220,129,5)"/><text x="25.2500%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.21%)</title><rect x="25.2066%" y="165" width="0.2066%" height="15" fill="rgb(242,17,10)"/><text x="25.4566%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.21%)</title><rect x="25.2066%" y="149" width="0.2066%" height="15" fill="rgb(242,107,0)"/><text x="25.4566%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.21%)</title><rect x="25.2066%" y="133" width="0.2066%" height="15" fill="rgb(251,28,31)"/><text x="25.4566%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.21%)</title><rect x="25.2066%" y="117" width="0.2066%" height="15" fill="rgb(233,223,10)"/><text x="25.4566%" y="127.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.21%)</title><rect x="25.4132%" y="245" width="0.2066%" height="15" fill="rgb(215,21,27)"/><text x="25.6632%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.21%)</title><rect x="25.4132%" y="229" width="0.2066%" height="15" fill="rgb(232,23,21)"/><text x="25.6632%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.21%)</title><rect x="25.4132%" y="213" width="0.2066%" height="15" fill="rgb(244,5,23)"/><text x="25.6632%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.21%)</title><rect x="25.4132%" y="197" width="0.2066%" height="15" fill="rgb(226,81,46)"/><text x="25.6632%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.21%)</title><rect x="25.4132%" y="181" width="0.2066%" height="15" fill="rgb(247,70,30)"/><text x="25.6632%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="25.4132%" y="165" width="0.2066%" height="15" fill="rgb(212,68,19)"/><text x="25.6632%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="25.4132%" y="149" width="0.2066%" height="15" fill="rgb(240,187,13)"/><text x="25.6632%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="25.4132%" y="133" width="0.2066%" height="15" fill="rgb(223,113,26)"/><text x="25.6632%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="26.0331%" y="213" width="0.2066%" height="15" fill="rgb(206,192,2)"/><text x="26.2831%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="26.0331%" y="197" width="0.2066%" height="15" fill="rgb(241,108,4)"/><text x="26.2831%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.21%)</title><rect x="26.0331%" y="181" width="0.2066%" height="15" fill="rgb(247,173,49)"/><text x="26.2831%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="26.0331%" y="165" width="0.2066%" height="15" fill="rgb(224,114,35)"/><text x="26.2831%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.21%)</title><rect x="26.0331%" y="149" width="0.2066%" height="15" fill="rgb(245,159,27)"/><text x="26.2831%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.21%)</title><rect x="26.0331%" y="133" width="0.2066%" height="15" fill="rgb(245,172,44)"/><text x="26.2831%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.21%)</title><rect x="26.0331%" y="117" width="0.2066%" height="15" fill="rgb(236,23,11)"/><text x="26.2831%" y="127.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.83%)</title><rect x="25.6198%" y="245" width="0.8264%" height="15" fill="rgb(205,117,38)"/><text x="25.8698%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.41%)</title><rect x="26.0331%" y="229" width="0.4132%" height="15" fill="rgb(237,72,25)"/><text x="26.2831%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.21%)</title><rect x="26.2397%" y="213" width="0.2066%" height="15" fill="rgb(244,70,9)"/><text x="26.4897%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.21%)</title><rect x="26.2397%" y="197" width="0.2066%" height="15" fill="rgb(217,125,39)"/><text x="26.4897%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.21%)</title><rect x="26.4463%" y="245" width="0.2066%" height="15" fill="rgb(235,36,10)"/><text x="26.6963%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="26.4463%" y="229" width="0.2066%" height="15" fill="rgb(251,123,47)"/><text x="26.6963%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="26.4463%" y="213" width="0.2066%" height="15" fill="rgb(221,13,13)"/><text x="26.6963%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.21%)</title><rect x="26.4463%" y="197" width="0.2066%" height="15" fill="rgb(238,131,9)"/><text x="26.6963%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="26.4463%" y="181" width="0.2066%" height="15" fill="rgb(211,50,8)"/><text x="26.6963%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.21%)</title><rect x="26.4463%" y="165" width="0.2066%" height="15" fill="rgb(245,182,24)"/><text x="26.6963%" y="175.50"></text></g><g><title>tests::fill_wor (130 samples, 26.86%)</title><rect x="0.0000%" y="501" width="26.8595%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="511.50">tests::fill_wor</text></g><g><title>clone (130 samples, 26.86%)</title><rect x="0.0000%" y="485" width="26.8595%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="495.50">clone</text></g><g><title>start_thread (128 samples, 26.45%)</title><rect x="0.4132%" y="469" width="26.4463%" height="15" fill="rgb(213,55,15)"/><text x="0.6632%" y="479.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (128 samples, 26.45%)</title><rect x="0.4132%" y="453" width="26.4463%" height="15" fill="rgb(209,9,3)"/><text x="0.6632%" y="463.50">std::sys::unix::thread::Thread::new::threa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (128 samples, 26.45%)</title><rect x="0.4132%" y="437" width="26.4463%" height="15" fill="rgb(230,59,30)"/><text x="0.6632%" y="447.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (128 samples, 26.45%)</title><rect x="0.4132%" y="421" width="26.4463%" height="15" fill="rgb(209,121,21)"/><text x="0.6632%" y="431.50">std::thread::Builder::spawn_unchecked::{{c..</text></g><g><title>std::panic::catch_unwind (128 samples, 26.45%)</title><rect x="0.4132%" y="405" width="26.4463%" height="15" fill="rgb(220,109,13)"/><text x="0.6632%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (128 samples, 26.45%)</title><rect x="0.4132%" y="389" width="26.4463%" height="15" fill="rgb(232,18,1)"/><text x="0.6632%" y="399.50">std::panicking::try</text></g><g><title>__rust_try (128 samples, 26.45%)</title><rect x="0.4132%" y="373" width="26.4463%" height="15" fill="rgb(215,41,42)"/><text x="0.6632%" y="383.50">__rust_try</text></g><g><title>std::panicking::try::do_call (128 samples, 26.45%)</title><rect x="0.4132%" y="357" width="26.4463%" height="15" fill="rgb(224,123,36)"/><text x="0.6632%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (128 samples, 26.45%)</title><rect x="0.4132%" y="341" width="26.4463%" height="15" fill="rgb(240,125,3)"/><text x="0.6632%" y="351.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (128 samples, 26.45%)</title><rect x="0.4132%" y="325" width="26.4463%" height="15" fill="rgb(205,98,50)"/><text x="0.6632%" y="335.50">std::thread::Builder::spawn_unchecked::{{c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (128 samples, 26.45%)</title><rect x="0.4132%" y="309" width="26.4463%" height="15" fill="rgb(205,185,37)"/><text x="0.6632%" y="319.50">std::sys_common::backtrace::__rust_begin_s..</text></g><g><title>xwords_rs::fill_crossword::{{closure}} (128 samples, 26.45%)</title><rect x="0.4132%" y="293" width="26.4463%" height="15" fill="rgb(238,207,15)"/><text x="0.6632%" y="303.50">xwords_rs::fill_crossword::{{closure}}</text></g><g><title>xwords_rs::is_viable (15 samples, 3.10%)</title><rect x="23.7603%" y="277" width="3.0992%" height="15" fill="rgb(213,199,42)"/><text x="24.0103%" y="287.50">xwo..</text></g><g><title>xwords_rs::parse_words (7 samples, 1.45%)</title><rect x="25.4132%" y="261" width="1.4463%" height="15" fill="rgb(235,201,11)"/><text x="25.6632%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.21%)</title><rect x="26.6529%" y="245" width="0.2066%" height="15" fill="rgb(207,46,11)"/><text x="26.9029%" y="255.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.21%)</title><rect x="26.6529%" y="229" width="0.2066%" height="15" fill="rgb(241,35,35)"/><text x="26.9029%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="26.8595%" y="261" width="0.2066%" height="15" fill="rgb(243,32,47)"/><text x="27.1095%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="26.8595%" y="245" width="0.2066%" height="15" fill="rgb(247,202,23)"/><text x="27.1095%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.21%)</title><rect x="26.8595%" y="229" width="0.2066%" height="15" fill="rgb(219,102,11)"/><text x="27.1095%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="26.8595%" y="293" width="0.4132%" height="15" fill="rgb(243,110,44)"/><text x="27.1095%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="26.8595%" y="277" width="0.4132%" height="15" fill="rgb(222,74,54)"/><text x="27.1095%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.21%)</title><rect x="27.0661%" y="261" width="0.2066%" height="15" fill="rgb(216,99,12)"/><text x="27.3161%" y="271.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="26.8595%" y="325" width="0.6198%" height="15" fill="rgb(226,22,26)"/><text x="27.1095%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="26.8595%" y="309" width="0.6198%" height="15" fill="rgb(217,163,10)"/><text x="27.1095%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.21%)</title><rect x="27.2727%" y="293" width="0.2066%" height="15" fill="rgb(213,25,53)"/><text x="27.5227%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="27.4793%" y="229" width="0.2066%" height="15" fill="rgb(252,105,26)"/><text x="27.7293%" y="239.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="27.4793%" y="213" width="0.2066%" height="15" fill="rgb(220,39,43)"/><text x="27.7293%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="27.4793%" y="197" width="0.2066%" height="15" fill="rgb(229,68,48)"/><text x="27.7293%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="27.4793%" y="181" width="0.2066%" height="15" fill="rgb(252,8,32)"/><text x="27.7293%" y="191.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="27.4793%" y="165" width="0.2066%" height="15" fill="rgb(223,20,43)"/><text x="27.7293%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="27.4793%" y="149" width="0.2066%" height="15" fill="rgb(229,81,49)"/><text x="27.7293%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="27.4793%" y="133" width="0.2066%" height="15" fill="rgb(236,28,36)"/><text x="27.7293%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="27.4793%" y="117" width="0.2066%" height="15" fill="rgb(249,185,26)"/><text x="27.7293%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="27.4793%" y="101" width="0.2066%" height="15" fill="rgb(249,174,33)"/><text x="27.7293%" y="111.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.21%)</title><rect x="27.4793%" y="85" width="0.2066%" height="15" fill="rgb(233,201,37)"/><text x="27.7293%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.21%)</title><rect x="27.4793%" y="69" width="0.2066%" height="15" fill="rgb(221,78,26)"/><text x="27.7293%" y="79.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.21%)</title><rect x="27.4793%" y="53" width="0.2066%" height="15" fill="rgb(250,127,30)"/><text x="27.7293%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone/&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone/&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref/alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="27.4793%" y="37" width="0.2066%" height="15" fill="rgb(230,49,44)"/><text x="27.7293%" y="47.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (2 samples, 0.41%)</title><rect x="27.8926%" y="53" width="0.4132%" height="15" fill="rgb(229,67,23)"/><text x="28.1426%" y="63.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (3 samples, 0.62%)</title><rect x="27.8926%" y="69" width="0.6198%" height="15" fill="rgb(249,83,47)"/><text x="28.1426%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.21%)</title><rect x="28.3058%" y="53" width="0.2066%" height="15" fill="rgb(215,43,3)"/><text x="28.5558%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (1 samples, 0.21%)</title><rect x="28.3058%" y="37" width="0.2066%" height="15" fill="rgb(238,154,13)"/><text x="28.5558%" y="47.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 1.03%)</title><rect x="27.6860%" y="229" width="1.0331%" height="15" fill="rgb(219,56,2)"/><text x="27.9360%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 1.03%)</title><rect x="27.6860%" y="213" width="1.0331%" height="15" fill="rgb(233,0,4)"/><text x="27.9360%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 1.03%)</title><rect x="27.6860%" y="197" width="1.0331%" height="15" fill="rgb(235,30,7)"/><text x="27.9360%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.03%)</title><rect x="27.6860%" y="181" width="1.0331%" height="15" fill="rgb(250,79,13)"/><text x="27.9360%" y="191.50"></text></g><g><title>core::mem::drop (5 samples, 1.03%)</title><rect x="27.6860%" y="165" width="1.0331%" height="15" fill="rgb(211,146,34)"/><text x="27.9360%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 1.03%)</title><rect x="27.6860%" y="149" width="1.0331%" height="15" fill="rgb(228,22,38)"/><text x="27.9360%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.03%)</title><rect x="27.6860%" y="133" width="1.0331%" height="15" fill="rgb(235,168,5)"/><text x="27.9360%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.83%)</title><rect x="27.8926%" y="117" width="0.8264%" height="15" fill="rgb(221,155,16)"/><text x="28.1426%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (4 samples, 0.83%)</title><rect x="27.8926%" y="101" width="0.8264%" height="15" fill="rgb(215,215,53)"/><text x="28.1426%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::replace (4 samples, 0.83%)</title><rect x="27.8926%" y="85" width="0.8264%" height="15" fill="rgb(223,4,10)"/><text x="28.1426%" y="95.50"></text></g><g><title>core::ptr::read (1 samples, 0.21%)</title><rect x="28.5124%" y="69" width="0.2066%" height="15" fill="rgb(234,103,6)"/><text x="28.7624%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.21%)</title><rect x="28.5124%" y="53" width="0.2066%" height="15" fill="rgb(227,97,0)"/><text x="28.7624%" y="63.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="29.1322%" y="101" width="0.2066%" height="15" fill="rgb(234,150,53)"/><text x="29.3822%" y="111.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.21%)</title><rect x="29.1322%" y="85" width="0.2066%" height="15" fill="rgb(228,201,54)"/><text x="29.3822%" y="95.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.21%)</title><rect x="29.1322%" y="69" width="0.2066%" height="15" fill="rgb(222,22,37)"/><text x="29.3822%" y="79.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="29.1322%" y="53" width="0.2066%" height="15" fill="rgb(237,53,32)"/><text x="29.3822%" y="63.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.21%)</title><rect x="29.1322%" y="37" width="0.2066%" height="15" fill="rgb(233,25,53)"/><text x="29.3822%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.21%)</title><rect x="29.3388%" y="101" width="0.2066%" height="15" fill="rgb(210,40,34)"/><text x="29.5888%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (6 samples, 1.24%)</title><rect x="28.7190%" y="117" width="1.2397%" height="15" fill="rgb(241,220,44)"/><text x="28.9690%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.41%)</title><rect x="29.5455%" y="101" width="0.4132%" height="15" fill="rgb(235,28,35)"/><text x="29.7955%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.41%)</title><rect x="29.5455%" y="85" width="0.4132%" height="15" fill="rgb(210,56,17)"/><text x="29.7955%" y="95.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.41%)</title><rect x="29.5455%" y="69" width="0.4132%" height="15" fill="rgb(224,130,29)"/><text x="29.7955%" y="79.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="29.7521%" y="53" width="0.2066%" height="15" fill="rgb(235,212,8)"/><text x="30.0021%" y="63.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.21%)</title><rect x="30.1653%" y="53" width="0.2066%" height="15" fill="rgb(223,33,50)"/><text x="30.4153%" y="63.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.21%)</title><rect x="30.1653%" y="37" width="0.2066%" height="15" fill="rgb(219,149,13)"/><text x="30.4153%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.62%)</title><rect x="29.9587%" y="101" width="0.6198%" height="15" fill="rgb(250,156,29)"/><text x="30.2087%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.62%)</title><rect x="29.9587%" y="85" width="0.6198%" height="15" fill="rgb(216,193,19)"/><text x="30.2087%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.62%)</title><rect x="29.9587%" y="69" width="0.6198%" height="15" fill="rgb(216,135,14)"/><text x="30.2087%" y="79.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="30.3719%" y="53" width="0.2066%" height="15" fill="rgb(241,47,5)"/><text x="30.6219%" y="63.50"></text></g><g><title>serde::de::MapAccess::next_entry (10 samples, 2.07%)</title><rect x="28.7190%" y="149" width="2.0661%" height="15" fill="rgb(233,42,35)"/><text x="28.9690%" y="159.50">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (10 samples, 2.07%)</title><rect x="28.7190%" y="133" width="2.0661%" height="15" fill="rgb(231,13,6)"/><text x="28.9690%" y="143.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.83%)</title><rect x="29.9587%" y="117" width="0.8264%" height="15" fill="rgb(207,181,40)"/><text x="30.2087%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.21%)</title><rect x="30.5785%" y="101" width="0.2066%" height="15" fill="rgb(254,173,49)"/><text x="30.8285%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="30.5785%" y="85" width="0.2066%" height="15" fill="rgb(221,1,38)"/><text x="30.8285%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="30.5785%" y="69" width="0.2066%" height="15" fill="rgb(206,124,46)"/><text x="30.8285%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="30.5785%" y="53" width="0.2066%" height="15" fill="rgb(249,21,11)"/><text x="30.8285%" y="63.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="30.5785%" y="37" width="0.2066%" height="15" fill="rgb(222,201,40)"/><text x="30.8285%" y="47.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (1 samples, 0.21%)</title><rect x="31.1983%" y="85" width="0.2066%" height="15" fill="rgb(235,61,29)"/><text x="31.4483%" y="95.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.21%)</title><rect x="32.4380%" y="53" width="0.2066%" height="15" fill="rgb(219,207,3)"/><text x="32.6880%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (5 samples, 1.03%)</title><rect x="32.6446%" y="53" width="1.0331%" height="15" fill="rgb(222,56,46)"/><text x="32.8946%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.41%)</title><rect x="33.2645%" y="37" width="0.4132%" height="15" fill="rgb(239,76,54)"/><text x="33.5145%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="34.9174%" y="37" width="0.6198%" height="15" fill="rgb(231,124,27)"/><text x="35.1674%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 2.69%)</title><rect x="33.6777%" y="53" width="2.6860%" height="15" fill="rgb(249,195,6)"/><text x="33.9277%" y="63.50">&lt;c..</text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.83%)</title><rect x="35.5372%" y="37" width="0.8264%" height="15" fill="rgb(237,174,47)"/><text x="35.7872%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::keys (1 samples, 0.21%)</title><rect x="36.3636%" y="53" width="0.2066%" height="15" fill="rgb(206,201,31)"/><text x="36.6136%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.21%)</title><rect x="36.5702%" y="53" width="0.2066%" height="15" fill="rgb(231,57,52)"/><text x="36.8202%" y="63.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (30 samples, 6.20%)</title><rect x="30.9917%" y="117" width="6.1983%" height="15" fill="rgb(248,177,22)"/><text x="31.2417%" y="127.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::search_tree (29 samples, 5.99%)</title><rect x="31.1983%" y="101" width="5.9917%" height="15" fill="rgb(215,211,37)"/><text x="31.4483%" y="111.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::search_node (28 samples, 5.79%)</title><rect x="31.4050%" y="85" width="5.7851%" height="15" fill="rgb(241,128,51)"/><text x="31.6550%" y="95.50">alloc::..</text></g><g><title>alloc::collections::btree::search::search_linear (28 samples, 5.79%)</title><rect x="31.4050%" y="69" width="5.7851%" height="15" fill="rgb(227,165,31)"/><text x="31.6550%" y="79.50">alloc::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.41%)</title><rect x="36.7769%" y="53" width="0.4132%" height="15" fill="rgb(228,167,24)"/><text x="37.0269%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.41%)</title><rect x="36.7769%" y="37" width="0.4132%" height="15" fill="rgb(228,143,12)"/><text x="37.0269%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::vals_mut (1 samples, 0.21%)</title><rect x="37.1901%" y="53" width="0.2066%" height="15" fill="rgb(249,149,8)"/><text x="37.4401%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.41%)</title><rect x="37.1901%" y="85" width="0.4132%" height="15" fill="rgb(243,35,44)"/><text x="37.4401%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.41%)</title><rect x="37.1901%" y="69" width="0.4132%" height="15" fill="rgb(246,89,9)"/><text x="37.4401%" y="79.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.21%)</title><rect x="37.3967%" y="53" width="0.2066%" height="15" fill="rgb(233,213,13)"/><text x="37.6467%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.62%)</title><rect x="37.1901%" y="101" width="0.6198%" height="15" fill="rgb(233,141,41)"/><text x="37.4401%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::KV&gt;::split (1 samples, 0.21%)</title><rect x="37.6033%" y="85" width="0.2066%" height="15" fill="rgb(239,167,4)"/><text x="37.8533%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::keys_mut (2 samples, 0.41%)</title><rect x="38.4298%" y="69" width="0.4132%" height="15" fill="rgb(209,217,16)"/><text x="38.6798%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_key_slice_mut (2 samples, 0.41%)</title><rect x="38.4298%" y="53" width="0.4132%" height="15" fill="rgb(219,88,35)"/><text x="38.6798%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::as_leaf_mut (1 samples, 0.21%)</title><rect x="38.6364%" y="37" width="0.2066%" height="15" fill="rgb(220,193,23)"/><text x="38.8864%" y="47.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (6 samples, 1.24%)</title><rect x="37.8099%" y="85" width="1.2397%" height="15" fill="rgb(230,90,52)"/><text x="38.0599%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::vals_mut (1 samples, 0.21%)</title><rect x="38.8430%" y="69" width="0.2066%" height="15" fill="rgb(252,106,19)"/><text x="39.0930%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::reborrow_mut (1 samples, 0.21%)</title><rect x="38.8430%" y="53" width="0.2066%" height="15" fill="rgb(206,74,20)"/><text x="39.0930%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (7 samples, 1.45%)</title><rect x="37.8099%" y="101" width="1.4463%" height="15" fill="rgb(230,138,44)"/><text x="38.0599%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (1 samples, 0.21%)</title><rect x="39.0496%" y="85" width="0.2066%" height="15" fill="rgb(235,182,43)"/><text x="39.2996%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.21%)</title><rect x="39.0496%" y="69" width="0.2066%" height="15" fill="rgb(242,16,51)"/><text x="39.2996%" y="79.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.21%)</title><rect x="39.0496%" y="53" width="0.2066%" height="15" fill="rgb(248,9,4)"/><text x="39.2996%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.21%)</title><rect x="39.0496%" y="37" width="0.2066%" height="15" fill="rgb(210,31,22)"/><text x="39.2996%" y="47.50"></text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (58 samples, 11.98%)</title><rect x="27.4793%" y="325" width="11.9835%" height="15" fill="rgb(239,54,39)"/><text x="27.7293%" y="335.50">&lt;xwords_rs::ALL_WO..</text></g><g><title>std::sync::once::Once::call_once (58 samples, 11.98%)</title><rect x="27.4793%" y="309" width="11.9835%" height="15" fill="rgb(230,99,41)"/><text x="27.7293%" y="319.50">std::sync::once::O..</text></g><g><title>std::sync::once::Once::call_inner (58 samples, 11.98%)</title><rect x="27.4793%" y="293" width="11.9835%" height="15" fill="rgb(253,106,12)"/><text x="27.7293%" y="303.50">std::sync::once::O..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (58 samples, 11.98%)</title><rect x="27.4793%" y="277" width="11.9835%" height="15" fill="rgb(213,46,41)"/><text x="27.7293%" y="287.50">std::sync::once::O..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (58 samples, 11.98%)</title><rect x="27.4793%" y="261" width="11.9835%" height="15" fill="rgb(215,133,35)"/><text x="27.7293%" y="271.50">lazy_static::lazy:..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (58 samples, 11.98%)</title><rect x="27.4793%" y="245" width="11.9835%" height="15" fill="rgb(213,28,5)"/><text x="27.7293%" y="255.50">core::ops::functio..</text></g><g><title>serde_json::de::from_reader (52 samples, 10.74%)</title><rect x="28.7190%" y="229" width="10.7438%" height="15" fill="rgb(215,77,49)"/><text x="28.9690%" y="239.50">serde_json::de::..</text></g><g><title>serde_json::de::from_trait (52 samples, 10.74%)</title><rect x="28.7190%" y="213" width="10.7438%" height="15" fill="rgb(248,100,22)"/><text x="28.9690%" y="223.50">serde_json::de::..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (52 samples, 10.74%)</title><rect x="28.7190%" y="197" width="10.7438%" height="15" fill="rgb(208,67,9)"/><text x="28.9690%" y="207.50">serde_json::valu..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (52 samples, 10.74%)</title><rect x="28.7190%" y="181" width="10.7438%" height="15" fill="rgb(219,133,21)"/><text x="28.9690%" y="191.50">&lt;&amp;mut serde_json..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (52 samples, 10.74%)</title><rect x="28.7190%" y="165" width="10.7438%" height="15" fill="rgb(246,46,29)"/><text x="28.9690%" y="175.50">&lt;serde_json::val..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (42 samples, 8.68%)</title><rect x="30.7851%" y="149" width="8.6777%" height="15" fill="rgb(246,185,52)"/><text x="31.0351%" y="159.50">serde_json::..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (42 samples, 8.68%)</title><rect x="30.7851%" y="133" width="8.6777%" height="15" fill="rgb(252,136,11)"/><text x="31.0351%" y="143.50">alloc::colle..</text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (11 samples, 2.27%)</title><rect x="37.1901%" y="117" width="2.2727%" height="15" fill="rgb(219,138,53)"/><text x="37.4401%" y="127.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.21%)</title><rect x="39.2562%" y="101" width="0.2066%" height="15" fill="rgb(211,51,23)"/><text x="39.5062%" y="111.50"></text></g><g><title>clone (62 samples, 12.81%)</title><rect x="26.8595%" y="485" width="12.8099%" height="15" fill="rgb(247,221,28)"/><text x="27.1095%" y="495.50">clone</text></g><g><title>start_thread (62 samples, 12.81%)</title><rect x="26.8595%" y="469" width="12.8099%" height="15" fill="rgb(251,222,45)"/><text x="27.1095%" y="479.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (62 samples, 12.81%)</title><rect x="26.8595%" y="453" width="12.8099%" height="15" fill="rgb(217,162,53)"/><text x="27.1095%" y="463.50">std::sys::unix::thr..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (62 samples, 12.81%)</title><rect x="26.8595%" y="437" width="12.8099%" height="15" fill="rgb(229,93,14)"/><text x="27.1095%" y="447.50">core::ops::function..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (62 samples, 12.81%)</title><rect x="26.8595%" y="421" width="12.8099%" height="15" fill="rgb(209,67,49)"/><text x="27.1095%" y="431.50">std::sys_common::ba..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (62 samples, 12.81%)</title><rect x="26.8595%" y="405" width="12.8099%" height="15" fill="rgb(213,87,29)"/><text x="27.1095%" y="415.50">test::run_test::run..</text></g><g><title>core::ops::function::FnOnce::call_once (62 samples, 12.81%)</title><rect x="26.8595%" y="389" width="12.8099%" height="15" fill="rgb(205,151,52)"/><text x="27.1095%" y="399.50">core::ops::function..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (62 samples, 12.81%)</title><rect x="26.8595%" y="373" width="12.8099%" height="15" fill="rgb(253,215,39)"/><text x="27.1095%" y="383.50">xwords_rs::tests::f..</text></g><g><title>xwords_rs::tests::find_fill_works (62 samples, 12.81%)</title><rect x="26.8595%" y="357" width="12.8099%" height="15" fill="rgb(221,220,41)"/><text x="27.1095%" y="367.50">xwords_rs::tests::f..</text></g><g><title>xwords_rs::find_fills (62 samples, 12.81%)</title><rect x="26.8595%" y="341" width="12.8099%" height="15" fill="rgb(218,133,21)"/><text x="27.1095%" y="351.50">xwords_rs::find_fil..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.21%)</title><rect x="39.4628%" y="325" width="0.2066%" height="15" fill="rgb(221,193,43)"/><text x="39.7128%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="39.4628%" y="309" width="0.2066%" height="15" fill="rgb(240,128,52)"/><text x="39.7128%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="39.4628%" y="293" width="0.2066%" height="15" fill="rgb(253,114,12)"/><text x="39.7128%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.21%)</title><rect x="39.4628%" y="277" width="0.2066%" height="15" fill="rgb(215,223,47)"/><text x="39.7128%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="39.4628%" y="261" width="0.2066%" height="15" fill="rgb(248,225,23)"/><text x="39.7128%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.21%)</title><rect x="39.4628%" y="245" width="0.2066%" height="15" fill="rgb(250,108,0)"/><text x="39.7128%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.21%)</title><rect x="39.4628%" y="229" width="0.2066%" height="15" fill="rgb(228,208,7)"/><text x="39.7128%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.21%)</title><rect x="39.4628%" y="213" width="0.2066%" height="15" fill="rgb(244,45,10)"/><text x="39.7128%" y="223.50"></text></g><g><title>realloc (1 samples, 0.21%)</title><rect x="39.4628%" y="197" width="0.2066%" height="15" fill="rgb(207,125,25)"/><text x="39.7128%" y="207.50"></text></g><g><title>&lt;serde_json::map::Keys as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="39.6694%" y="181" width="0.2066%" height="15" fill="rgb(210,195,18)"/><text x="39.9194%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="39.6694%" y="165" width="0.2066%" height="15" fill="rgb(249,80,12)"/><text x="39.9194%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="39.6694%" y="149" width="0.2066%" height="15" fill="rgb(221,65,9)"/><text x="39.9194%" y="159.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="39.6694%" y="133" width="0.2066%" height="15" fill="rgb(235,49,36)"/><text x="39.9194%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="39.6694%" y="117" width="0.2066%" height="15" fill="rgb(225,32,20)"/><text x="39.9194%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::replace (1 samples, 0.21%)</title><rect x="39.6694%" y="101" width="0.2066%" height="15" fill="rgb(215,141,46)"/><text x="39.9194%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (1 samples, 0.21%)</title><rect x="39.6694%" y="85" width="0.2066%" height="15" fill="rgb(250,160,47)"/><text x="39.9194%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.21%)</title><rect x="39.6694%" y="69" width="0.2066%" height="15" fill="rgb(216,222,40)"/><text x="39.9194%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (1 samples, 0.21%)</title><rect x="39.6694%" y="53" width="0.2066%" height="15" fill="rgb(234,217,39)"/><text x="39.9194%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (1 samples, 0.21%)</title><rect x="39.6694%" y="37" width="0.2066%" height="15" fill="rgb(207,178,40)"/><text x="39.9194%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 1.03%)</title><rect x="39.6694%" y="325" width="1.0331%" height="15" fill="rgb(221,136,13)"/><text x="39.9194%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 1.03%)</title><rect x="39.6694%" y="309" width="1.0331%" height="15" fill="rgb(249,199,10)"/><text x="39.9194%" y="319.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="39.6694%" y="293" width="1.0331%" height="15" fill="rgb(249,222,13)"/><text x="39.9194%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="39.6694%" y="277" width="1.0331%" height="15" fill="rgb(244,185,38)"/><text x="39.9194%" y="287.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="39.6694%" y="261" width="1.0331%" height="15" fill="rgb(236,202,9)"/><text x="39.9194%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 1.03%)</title><rect x="39.6694%" y="245" width="1.0331%" height="15" fill="rgb(250,229,37)"/><text x="39.9194%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.03%)</title><rect x="39.6694%" y="229" width="1.0331%" height="15" fill="rgb(206,174,23)"/><text x="39.9194%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.03%)</title><rect x="39.6694%" y="213" width="1.0331%" height="15" fill="rgb(211,33,43)"/><text x="39.9194%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 1.03%)</title><rect x="39.6694%" y="197" width="1.0331%" height="15" fill="rgb(245,58,50)"/><text x="39.9194%" y="207.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="39.8760%" y="181" width="0.8264%" height="15" fill="rgb(244,68,36)"/><text x="40.1260%" y="191.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="39.8760%" y="165" width="0.8264%" height="15" fill="rgb(232,229,15)"/><text x="40.1260%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.83%)</title><rect x="39.8760%" y="149" width="0.8264%" height="15" fill="rgb(254,30,23)"/><text x="40.1260%" y="159.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (4 samples, 0.83%)</title><rect x="39.8760%" y="133" width="0.8264%" height="15" fill="rgb(235,160,14)"/><text x="40.1260%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.83%)</title><rect x="39.8760%" y="117" width="0.8264%" height="15" fill="rgb(212,155,44)"/><text x="40.1260%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.83%)</title><rect x="39.8760%" y="101" width="0.8264%" height="15" fill="rgb(226,2,50)"/><text x="40.1260%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.83%)</title><rect x="39.8760%" y="85" width="0.8264%" height="15" fill="rgb(234,177,6)"/><text x="40.1260%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.83%)</title><rect x="39.8760%" y="69" width="0.8264%" height="15" fill="rgb(217,24,9)"/><text x="40.1260%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.83%)</title><rect x="39.8760%" y="53" width="0.8264%" height="15" fill="rgb(220,13,46)"/><text x="40.1260%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.83%)</title><rect x="39.8760%" y="37" width="0.8264%" height="15" fill="rgb(239,221,27)"/><text x="40.1260%" y="47.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.21%)</title><rect x="40.7025%" y="133" width="0.2066%" height="15" fill="rgb(222,198,25)"/><text x="40.9525%" y="143.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.21%)</title><rect x="40.7025%" y="117" width="0.2066%" height="15" fill="rgb(211,99,13)"/><text x="40.9525%" y="127.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.21%)</title><rect x="40.7025%" y="101" width="0.2066%" height="15" fill="rgb(232,111,31)"/><text x="40.9525%" y="111.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.21%)</title><rect x="40.7025%" y="85" width="0.2066%" height="15" fill="rgb(245,82,37)"/><text x="40.9525%" y="95.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.21%)</title><rect x="40.7025%" y="69" width="0.2066%" height="15" fill="rgb(227,149,46)"/><text x="40.9525%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.21%)</title><rect x="40.7025%" y="53" width="0.2066%" height="15" fill="rgb(218,36,50)"/><text x="40.9525%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.21%)</title><rect x="40.7025%" y="37" width="0.2066%" height="15" fill="rgb(226,80,48)"/><text x="40.9525%" y="47.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="40.9091%" y="69" width="0.6198%" height="15" fill="rgb(238,224,15)"/><text x="41.1591%" y="79.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="40.9091%" y="53" width="0.6198%" height="15" fill="rgb(241,136,10)"/><text x="41.1591%" y="63.50"></text></g><g><title>core::slice::from_mut (3 samples, 0.62%)</title><rect x="40.9091%" y="37" width="0.6198%" height="15" fill="rgb(208,32,45)"/><text x="41.1591%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (6 samples, 1.24%)</title><rect x="40.7025%" y="213" width="1.2397%" height="15" fill="rgb(207,135,9)"/><text x="40.9525%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 1.24%)</title><rect x="40.7025%" y="197" width="1.2397%" height="15" fill="rgb(206,86,44)"/><text x="40.9525%" y="207.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (6 samples, 1.24%)</title><rect x="40.7025%" y="181" width="1.2397%" height="15" fill="rgb(245,177,15)"/><text x="40.9525%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (6 samples, 1.24%)</title><rect x="40.7025%" y="165" width="1.2397%" height="15" fill="rgb(206,64,50)"/><text x="40.9525%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 1.24%)</title><rect x="40.7025%" y="149" width="1.2397%" height="15" fill="rgb(234,36,40)"/><text x="40.9525%" y="159.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (5 samples, 1.03%)</title><rect x="40.9091%" y="133" width="1.0331%" height="15" fill="rgb(213,64,8)"/><text x="41.1591%" y="143.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (5 samples, 1.03%)</title><rect x="40.9091%" y="117" width="1.0331%" height="15" fill="rgb(210,75,36)"/><text x="41.1591%" y="127.50"></text></g><g><title>serde_json::read::next_or_eof (5 samples, 1.03%)</title><rect x="40.9091%" y="101" width="1.0331%" height="15" fill="rgb(229,88,21)"/><text x="41.1591%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (5 samples, 1.03%)</title><rect x="40.9091%" y="85" width="1.0331%" height="15" fill="rgb(252,204,47)"/><text x="41.1591%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.41%)</title><rect x="41.5289%" y="69" width="0.4132%" height="15" fill="rgb(208,77,27)"/><text x="41.7789%" y="79.50"></text></g><g><title>core::mem::take (2 samples, 0.41%)</title><rect x="41.5289%" y="53" width="0.4132%" height="15" fill="rgb(221,76,26)"/><text x="41.7789%" y="63.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.41%)</title><rect x="41.5289%" y="37" width="0.4132%" height="15" fill="rgb(225,139,18)"/><text x="41.7789%" y="47.50"></text></g><g><title>serde::de::MapAccess::next_entry (7 samples, 1.45%)</title><rect x="40.7025%" y="245" width="1.4463%" height="15" fill="rgb(230,137,11)"/><text x="40.9525%" y="255.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (7 samples, 1.45%)</title><rect x="40.7025%" y="229" width="1.4463%" height="15" fill="rgb(212,28,1)"/><text x="40.9525%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.21%)</title><rect x="41.9421%" y="213" width="0.2066%" height="15" fill="rgb(248,164,17)"/><text x="42.1921%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="41.9421%" y="197" width="0.2066%" height="15" fill="rgb(222,171,42)"/><text x="42.1921%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="41.9421%" y="181" width="0.2066%" height="15" fill="rgb(243,84,45)"/><text x="42.1921%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="41.9421%" y="165" width="0.2066%" height="15" fill="rgb(252,49,23)"/><text x="42.1921%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="41.9421%" y="149" width="0.2066%" height="15" fill="rgb(215,19,7)"/><text x="42.1921%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="41.9421%" y="133" width="0.2066%" height="15" fill="rgb(238,81,41)"/><text x="42.1921%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="41.9421%" y="117" width="0.2066%" height="15" fill="rgb(210,199,37)"/><text x="42.1921%" y="127.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="41.9421%" y="101" width="0.2066%" height="15" fill="rgb(244,192,49)"/><text x="42.1921%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="41.9421%" y="85" width="0.2066%" height="15" fill="rgb(226,211,11)"/><text x="42.1921%" y="95.50"></text></g><g><title>core::slice::from_mut (1 samples, 0.21%)</title><rect x="41.9421%" y="69" width="0.2066%" height="15" fill="rgb(236,162,54)"/><text x="42.1921%" y="79.50"></text></g><g><title>core::slice::from_raw_parts_mut (1 samples, 0.21%)</title><rect x="41.9421%" y="53" width="0.2066%" height="15" fill="rgb(220,229,9)"/><text x="42.1921%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.21%)</title><rect x="41.9421%" y="37" width="0.2066%" height="15" fill="rgb(250,87,22)"/><text x="42.1921%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 3.10%)</title><rect x="39.6694%" y="485" width="3.0992%" height="15" fill="rgb(239,43,17)"/><text x="39.9194%" y="495.50">cor..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (15 samples, 3.10%)</title><rect x="39.6694%" y="469" width="3.0992%" height="15" fill="rgb(231,177,25)"/><text x="39.9194%" y="479.50">xwo..</text></g><g><title>xwords_rs::tests::find_fill_works (15 samples, 3.10%)</title><rect x="39.6694%" y="453" width="3.0992%" height="15" fill="rgb(219,179,1)"/><text x="39.9194%" y="463.50">xwo..</text></g><g><title>xwords_rs::find_fills (15 samples, 3.10%)</title><rect x="39.6694%" y="437" width="3.0992%" height="15" fill="rgb(238,219,53)"/><text x="39.9194%" y="447.50">xwo..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (15 samples, 3.10%)</title><rect x="39.6694%" y="421" width="3.0992%" height="15" fill="rgb(232,167,36)"/><text x="39.9194%" y="431.50">&lt;xw..</text></g><g><title>std::sync::once::Once::call_once (15 samples, 3.10%)</title><rect x="39.6694%" y="405" width="3.0992%" height="15" fill="rgb(244,19,51)"/><text x="39.9194%" y="415.50">std..</text></g><g><title>std::sync::once::Once::call_inner (15 samples, 3.10%)</title><rect x="39.6694%" y="389" width="3.0992%" height="15" fill="rgb(224,6,22)"/><text x="39.9194%" y="399.50">std..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (15 samples, 3.10%)</title><rect x="39.6694%" y="373" width="3.0992%" height="15" fill="rgb(224,145,5)"/><text x="39.9194%" y="383.50">std..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (15 samples, 3.10%)</title><rect x="39.6694%" y="357" width="3.0992%" height="15" fill="rgb(234,130,49)"/><text x="39.9194%" y="367.50">laz..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (15 samples, 3.10%)</title><rect x="39.6694%" y="341" width="3.0992%" height="15" fill="rgb(254,6,2)"/><text x="39.9194%" y="351.50">cor..</text></g><g><title>serde_json::de::from_reader (10 samples, 2.07%)</title><rect x="40.7025%" y="325" width="2.0661%" height="15" fill="rgb(208,96,46)"/><text x="40.9525%" y="335.50">s..</text></g><g><title>serde_json::de::from_trait (10 samples, 2.07%)</title><rect x="40.7025%" y="309" width="2.0661%" height="15" fill="rgb(239,3,39)"/><text x="40.9525%" y="319.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 2.07%)</title><rect x="40.7025%" y="293" width="2.0661%" height="15" fill="rgb(233,210,1)"/><text x="40.9525%" y="303.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 2.07%)</title><rect x="40.7025%" y="277" width="2.0661%" height="15" fill="rgb(244,137,37)"/><text x="40.9525%" y="287.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 2.07%)</title><rect x="40.7025%" y="261" width="2.0661%" height="15" fill="rgb(240,136,2)"/><text x="40.9525%" y="271.50">&lt;..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (3 samples, 0.62%)</title><rect x="42.1488%" y="245" width="0.6198%" height="15" fill="rgb(239,18,37)"/><text x="42.3988%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3 samples, 0.62%)</title><rect x="42.1488%" y="229" width="0.6198%" height="15" fill="rgb(218,185,22)"/><text x="42.3988%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (3 samples, 0.62%)</title><rect x="42.1488%" y="213" width="0.6198%" height="15" fill="rgb(225,218,4)"/><text x="42.3988%" y="223.50"></text></g><g><title>alloc::collections::btree::search::search_tree (3 samples, 0.62%)</title><rect x="42.1488%" y="197" width="0.6198%" height="15" fill="rgb(230,182,32)"/><text x="42.3988%" y="207.50"></text></g><g><title>alloc::collections::btree::search::search_node (3 samples, 0.62%)</title><rect x="42.1488%" y="181" width="0.6198%" height="15" fill="rgb(242,56,43)"/><text x="42.3988%" y="191.50"></text></g><g><title>alloc::collections::btree::search::search_linear (3 samples, 0.62%)</title><rect x="42.1488%" y="165" width="0.6198%" height="15" fill="rgb(233,99,24)"/><text x="42.3988%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.62%)</title><rect x="42.1488%" y="149" width="0.6198%" height="15" fill="rgb(234,209,42)"/><text x="42.3988%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.62%)</title><rect x="42.1488%" y="133" width="0.6198%" height="15" fill="rgb(227,7,12)"/><text x="42.3988%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.62%)</title><rect x="42.1488%" y="117" width="0.6198%" height="15" fill="rgb(245,203,43)"/><text x="42.3988%" y="127.50"></text></g><g><title>&lt;u8 as core::slice::SliceOrd&gt;::compare (3 samples, 0.62%)</title><rect x="42.1488%" y="101" width="0.6198%" height="15" fill="rgb(238,205,33)"/><text x="42.3988%" y="111.50"></text></g><g><title>core::cmp::min (3 samples, 0.62%)</title><rect x="42.1488%" y="85" width="0.6198%" height="15" fill="rgb(231,56,7)"/><text x="42.3988%" y="95.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.62%)</title><rect x="42.1488%" y="69" width="0.6198%" height="15" fill="rgb(244,186,29)"/><text x="42.3988%" y="79.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.62%)</title><rect x="42.1488%" y="53" width="0.6198%" height="15" fill="rgb(234,111,31)"/><text x="42.3988%" y="63.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.62%)</title><rect x="42.1488%" y="37" width="0.6198%" height="15" fill="rgb(241,149,10)"/><text x="42.3988%" y="47.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}}/alloc::collections::btree::unwrap_unchecked (1 samples, 0.21%)</title><rect x="42.7686%" y="37" width="0.2066%" height="15" fill="rgb(249,206,44)"/><text x="43.0186%" y="47.50"></text></g><g><title>&lt;serde_json::map::Keys as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="42.7686%" y="133" width="0.6198%" height="15" fill="rgb(251,153,30)"/><text x="43.0186%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="42.7686%" y="117" width="0.6198%" height="15" fill="rgb(239,152,38)"/><text x="43.0186%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="42.7686%" y="101" width="0.6198%" height="15" fill="rgb(249,139,47)"/><text x="43.0186%" y="111.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (3 samples, 0.62%)</title><rect x="42.7686%" y="85" width="0.6198%" height="15" fill="rgb(244,64,35)"/><text x="43.0186%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (3 samples, 0.62%)</title><rect x="42.7686%" y="69" width="0.6198%" height="15" fill="rgb(216,46,15)"/><text x="43.0186%" y="79.50"></text></g><g><title>alloc::collections::btree::navigate::replace (3 samples, 0.62%)</title><rect x="42.7686%" y="53" width="0.6198%" height="15" fill="rgb(250,74,19)"/><text x="43.0186%" y="63.50"></text></g><g><title>core::ptr::read (2 samples, 0.41%)</title><rect x="42.9752%" y="37" width="0.4132%" height="15" fill="rgb(249,42,33)"/><text x="43.2252%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="43.3884%" y="37" width="0.2066%" height="15" fill="rgb(242,149,17)"/><text x="43.6384%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.41%)</title><rect x="43.3884%" y="53" width="0.4132%" height="15" fill="rgb(244,29,21)"/><text x="43.6384%" y="63.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.21%)</title><rect x="43.5950%" y="37" width="0.2066%" height="15" fill="rgb(220,130,37)"/><text x="43.8450%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 0.21%)</title><rect x="43.8017%" y="37" width="0.2066%" height="15" fill="rgb(211,67,2)"/><text x="44.0517%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 1.45%)</title><rect x="42.7686%" y="277" width="1.4463%" height="15" fill="rgb(235,68,52)"/><text x="43.0186%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 1.45%)</title><rect x="42.7686%" y="261" width="1.4463%" height="15" fill="rgb(246,142,3)"/><text x="43.0186%" y="271.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (7 samples, 1.45%)</title><rect x="42.7686%" y="245" width="1.4463%" height="15" fill="rgb(241,25,7)"/><text x="43.0186%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 1.45%)</title><rect x="42.7686%" y="229" width="1.4463%" height="15" fill="rgb(242,119,39)"/><text x="43.0186%" y="239.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 1.45%)</title><rect x="42.7686%" y="213" width="1.4463%" height="15" fill="rgb(241,98,45)"/><text x="43.0186%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 1.45%)</title><rect x="42.7686%" y="197" width="1.4463%" height="15" fill="rgb(254,28,30)"/><text x="43.0186%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 1.45%)</title><rect x="42.7686%" y="181" width="1.4463%" height="15" fill="rgb(241,142,54)"/><text x="43.0186%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 1.45%)</title><rect x="42.7686%" y="165" width="1.4463%" height="15" fill="rgb(222,85,15)"/><text x="43.0186%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 1.45%)</title><rect x="42.7686%" y="149" width="1.4463%" height="15" fill="rgb(210,85,47)"/><text x="43.0186%" y="159.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="43.3884%" y="133" width="0.8264%" height="15" fill="rgb(224,206,25)"/><text x="43.6384%" y="143.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="43.3884%" y="117" width="0.8264%" height="15" fill="rgb(243,201,19)"/><text x="43.6384%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.83%)</title><rect x="43.3884%" y="101" width="0.8264%" height="15" fill="rgb(236,59,4)"/><text x="43.6384%" y="111.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (4 samples, 0.83%)</title><rect x="43.3884%" y="85" width="0.8264%" height="15" fill="rgb(254,179,45)"/><text x="43.6384%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.83%)</title><rect x="43.3884%" y="69" width="0.8264%" height="15" fill="rgb(226,14,10)"/><text x="43.6384%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.41%)</title><rect x="43.8017%" y="53" width="0.4132%" height="15" fill="rgb(244,27,41)"/><text x="44.0517%" y="63.50"></text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.21%)</title><rect x="44.0083%" y="37" width="0.2066%" height="15" fill="rgb(235,35,32)"/><text x="44.2583%" y="47.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="277" width="0.4132%" height="15" fill="rgb(218,68,31)"/><text x="44.4649%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="261" width="0.4132%" height="15" fill="rgb(207,120,37)"/><text x="44.4649%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="245" width="0.4132%" height="15" fill="rgb(227,98,0)"/><text x="44.4649%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.41%)</title><rect x="44.2149%" y="229" width="0.4132%" height="15" fill="rgb(207,7,3)"/><text x="44.4649%" y="239.50"></text></g><g><title>core::mem::drop (2 samples, 0.41%)</title><rect x="44.2149%" y="213" width="0.4132%" height="15" fill="rgb(206,98,19)"/><text x="44.4649%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="197" width="0.4132%" height="15" fill="rgb(217,5,26)"/><text x="44.4649%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.41%)</title><rect x="44.2149%" y="181" width="0.4132%" height="15" fill="rgb(235,190,38)"/><text x="44.4649%" y="191.50"></text></g><g><title>core::mem::drop (2 samples, 0.41%)</title><rect x="44.2149%" y="165" width="0.4132%" height="15" fill="rgb(247,86,24)"/><text x="44.4649%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="149" width="0.4132%" height="15" fill="rgb(205,101,16)"/><text x="44.4649%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="133" width="0.4132%" height="15" fill="rgb(246,168,33)"/><text x="44.4649%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="117" width="0.4132%" height="15" fill="rgb(231,114,1)"/><text x="44.4649%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.41%)</title><rect x="44.2149%" y="101" width="0.4132%" height="15" fill="rgb(207,184,53)"/><text x="44.4649%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.41%)</title><rect x="44.2149%" y="85" width="0.4132%" height="15" fill="rgb(224,95,51)"/><text x="44.4649%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.41%)</title><rect x="44.2149%" y="69" width="0.4132%" height="15" fill="rgb(212,188,45)"/><text x="44.4649%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.41%)</title><rect x="44.2149%" y="53" width="0.4132%" height="15" fill="rgb(223,154,38)"/><text x="44.4649%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.21%)</title><rect x="44.6281%" y="53" width="0.2066%" height="15" fill="rgb(251,22,52)"/><text x="44.8781%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.21%)</title><rect x="44.8347%" y="37" width="0.2066%" height="15" fill="rgb(229,209,22)"/><text x="45.0847%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.41%)</title><rect x="44.8347%" y="53" width="0.4132%" height="15" fill="rgb(234,138,34)"/><text x="45.0847%" y="63.50"></text></g><g><title>core::ptr::write (1 samples, 0.21%)</title><rect x="45.0413%" y="37" width="0.2066%" height="15" fill="rgb(212,95,11)"/><text x="45.2913%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (8 samples, 1.65%)</title><rect x="44.6281%" y="165" width="1.6529%" height="15" fill="rgb(240,179,47)"/><text x="44.8781%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 1.65%)</title><rect x="44.6281%" y="149" width="1.6529%" height="15" fill="rgb(240,163,11)"/><text x="44.8781%" y="159.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (8 samples, 1.65%)</title><rect x="44.6281%" y="133" width="1.6529%" height="15" fill="rgb(236,37,12)"/><text x="44.8781%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (8 samples, 1.65%)</title><rect x="44.6281%" y="117" width="1.6529%" height="15" fill="rgb(232,164,16)"/><text x="44.8781%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 1.65%)</title><rect x="44.6281%" y="101" width="1.6529%" height="15" fill="rgb(244,205,15)"/><text x="44.8781%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 1.65%)</title><rect x="44.6281%" y="85" width="1.6529%" height="15" fill="rgb(223,117,47)"/><text x="44.8781%" y="95.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (8 samples, 1.65%)</title><rect x="44.6281%" y="69" width="1.6529%" height="15" fill="rgb(244,107,35)"/><text x="44.8781%" y="79.50"></text></g><g><title>serde_json::read::next_or_eof (5 samples, 1.03%)</title><rect x="45.2479%" y="53" width="1.0331%" height="15" fill="rgb(205,140,8)"/><text x="45.4979%" y="63.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (5 samples, 1.03%)</title><rect x="45.2479%" y="37" width="1.0331%" height="15" fill="rgb(228,84,46)"/><text x="45.4979%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="46.2810%" y="149" width="0.2066%" height="15" fill="rgb(254,188,9)"/><text x="46.5310%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="46.2810%" y="133" width="0.2066%" height="15" fill="rgb(206,112,54)"/><text x="46.5310%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="46.2810%" y="117" width="0.2066%" height="15" fill="rgb(216,84,49)"/><text x="46.5310%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="46.2810%" y="101" width="0.2066%" height="15" fill="rgb(214,194,35)"/><text x="46.5310%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="46.2810%" y="85" width="0.2066%" height="15" fill="rgb(249,28,3)"/><text x="46.5310%" y="95.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="46.2810%" y="69" width="0.2066%" height="15" fill="rgb(222,56,52)"/><text x="46.5310%" y="79.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="46.2810%" y="53" width="0.2066%" height="15" fill="rgb(245,217,50)"/><text x="46.5310%" y="63.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="46.2810%" y="37" width="0.2066%" height="15" fill="rgb(213,201,24)"/><text x="46.5310%" y="47.50"></text></g><g><title>serde::de::MapAccess::next_entry (17 samples, 3.51%)</title><rect x="44.6281%" y="197" width="3.5124%" height="15" fill="rgb(248,116,28)"/><text x="44.8781%" y="207.50">ser..</text></g><g><title>serde::de::MapAccess::next_entry_seed (17 samples, 3.51%)</title><rect x="44.6281%" y="181" width="3.5124%" height="15" fill="rgb(219,72,43)"/><text x="44.8781%" y="191.50">ser..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9 samples, 1.86%)</title><rect x="46.2810%" y="165" width="1.8595%" height="15" fill="rgb(209,138,14)"/><text x="46.5310%" y="175.50">&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (8 samples, 1.65%)</title><rect x="46.4876%" y="149" width="1.6529%" height="15" fill="rgb(222,18,33)"/><text x="46.7376%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (8 samples, 1.65%)</title><rect x="46.4876%" y="133" width="1.6529%" height="15" fill="rgb(213,199,7)"/><text x="46.7376%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (8 samples, 1.65%)</title><rect x="46.4876%" y="117" width="1.6529%" height="15" fill="rgb(250,110,10)"/><text x="46.7376%" y="127.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (8 samples, 1.65%)</title><rect x="46.4876%" y="101" width="1.6529%" height="15" fill="rgb(248,123,6)"/><text x="46.7376%" y="111.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.65%)</title><rect x="46.4876%" y="85" width="1.6529%" height="15" fill="rgb(206,91,31)"/><text x="46.7376%" y="95.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.65%)</title><rect x="46.4876%" y="69" width="1.6529%" height="15" fill="rgb(211,154,13)"/><text x="46.7376%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (8 samples, 1.65%)</title><rect x="46.4876%" y="53" width="1.6529%" height="15" fill="rgb(225,148,7)"/><text x="46.7376%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.83%)</title><rect x="48.1405%" y="53" width="0.8264%" height="15" fill="rgb(220,160,43)"/><text x="48.3905%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (4 samples, 0.83%)</title><rect x="48.1405%" y="37" width="0.8264%" height="15" fill="rgb(213,52,39)"/><text x="48.3905%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 1.45%)</title><rect x="48.1405%" y="69" width="1.4463%" height="15" fill="rgb(243,137,7)"/><text x="48.3905%" y="79.50"></text></g><g><title>core::slice::from_raw_parts (3 samples, 0.62%)</title><rect x="48.9669%" y="53" width="0.6198%" height="15" fill="rgb(230,79,13)"/><text x="49.2169%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (3 samples, 0.62%)</title><rect x="48.9669%" y="37" width="0.6198%" height="15" fill="rgb(247,105,23)"/><text x="49.2169%" y="47.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.21%)</title><rect x="51.8595%" y="37" width="0.2066%" height="15" fill="rgb(223,179,41)"/><text x="52.1095%" y="47.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (20 samples, 4.13%)</title><rect x="48.1405%" y="165" width="4.1322%" height="15" fill="rgb(218,9,34)"/><text x="48.3905%" y="175.50">alloc..</text></g><g><title>alloc::collections::btree::search::search_tree (20 samples, 4.13%)</title><rect x="48.1405%" y="149" width="4.1322%" height="15" fill="rgb(222,106,8)"/><text x="48.3905%" y="159.50">alloc..</text></g><g><title>alloc::collections::btree::search::search_node (20 samples, 4.13%)</title><rect x="48.1405%" y="133" width="4.1322%" height="15" fill="rgb(211,220,0)"/><text x="48.3905%" y="143.50">alloc..</text></g><g><title>alloc::collections::btree::search::search_linear (20 samples, 4.13%)</title><rect x="48.1405%" y="117" width="4.1322%" height="15" fill="rgb(229,52,16)"/><text x="48.3905%" y="127.50">alloc..</text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (20 samples, 4.13%)</title><rect x="48.1405%" y="101" width="4.1322%" height="15" fill="rgb(212,155,18)"/><text x="48.3905%" y="111.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (20 samples, 4.13%)</title><rect x="48.1405%" y="85" width="4.1322%" height="15" fill="rgb(242,21,14)"/><text x="48.3905%" y="95.50">&lt;allo..</text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (13 samples, 2.69%)</title><rect x="49.5868%" y="69" width="2.6860%" height="15" fill="rgb(222,19,48)"/><text x="49.8368%" y="79.50">co..</text></g><g><title>&lt;u8 as core::slice::SliceOrd&gt;::compare (13 samples, 2.69%)</title><rect x="49.5868%" y="53" width="2.6860%" height="15" fill="rgb(232,45,27)"/><text x="49.8368%" y="63.50">&lt;u..</text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 0.21%)</title><rect x="52.0661%" y="37" width="0.2066%" height="15" fill="rgb(249,103,42)"/><text x="52.3161%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (47 samples, 9.71%)</title><rect x="42.7686%" y="485" width="9.7107%" height="15" fill="rgb(246,81,33)"/><text x="43.0186%" y="495.50">core::ops::fun..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47 samples, 9.71%)</title><rect x="42.7686%" y="469" width="9.7107%" height="15" fill="rgb(252,33,42)"/><text x="43.0186%" y="479.50">std::sys_commo..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (47 samples, 9.71%)</title><rect x="42.7686%" y="453" width="9.7107%" height="15" fill="rgb(209,212,41)"/><text x="43.0186%" y="463.50">test::run_test..</text></g><g><title>core::ops::function::FnOnce::call_once (47 samples, 9.71%)</title><rect x="42.7686%" y="437" width="9.7107%" height="15" fill="rgb(207,154,6)"/><text x="43.0186%" y="447.50">core::ops::fun..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (47 samples, 9.71%)</title><rect x="42.7686%" y="421" width="9.7107%" height="15" fill="rgb(223,64,47)"/><text x="43.0186%" y="431.50">xwords_rs::tes..</text></g><g><title>xwords_rs::tests::find_fill_works (47 samples, 9.71%)</title><rect x="42.7686%" y="405" width="9.7107%" height="15" fill="rgb(211,161,38)"/><text x="43.0186%" y="415.50">xwords_rs::tes..</text></g><g><title>xwords_rs::find_fills (47 samples, 9.71%)</title><rect x="42.7686%" y="389" width="9.7107%" height="15" fill="rgb(219,138,40)"/><text x="43.0186%" y="399.50">xwords_rs::fin..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (47 samples, 9.71%)</title><rect x="42.7686%" y="373" width="9.7107%" height="15" fill="rgb(241,228,46)"/><text x="43.0186%" y="383.50">&lt;xwords_rs::AL..</text></g><g><title>std::sync::once::Once::call_once (47 samples, 9.71%)</title><rect x="42.7686%" y="357" width="9.7107%" height="15" fill="rgb(223,209,38)"/><text x="43.0186%" y="367.50">std::sync::onc..</text></g><g><title>std::sync::once::Once::call_inner (47 samples, 9.71%)</title><rect x="42.7686%" y="341" width="9.7107%" height="15" fill="rgb(236,164,45)"/><text x="43.0186%" y="351.50">std::sync::onc..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (47 samples, 9.71%)</title><rect x="42.7686%" y="325" width="9.7107%" height="15" fill="rgb(231,15,5)"/><text x="43.0186%" y="335.50">std::sync::onc..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (47 samples, 9.71%)</title><rect x="42.7686%" y="309" width="9.7107%" height="15" fill="rgb(252,35,15)"/><text x="43.0186%" y="319.50">lazy_static::l..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (47 samples, 9.71%)</title><rect x="42.7686%" y="293" width="9.7107%" height="15" fill="rgb(248,181,18)"/><text x="43.0186%" y="303.50">core::ops::fun..</text></g><g><title>serde_json::de::from_reader (38 samples, 7.85%)</title><rect x="44.6281%" y="277" width="7.8512%" height="15" fill="rgb(233,39,42)"/><text x="44.8781%" y="287.50">serde_json:..</text></g><g><title>serde_json::de::from_trait (38 samples, 7.85%)</title><rect x="44.6281%" y="261" width="7.8512%" height="15" fill="rgb(238,110,33)"/><text x="44.8781%" y="271.50">serde_json:..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (38 samples, 7.85%)</title><rect x="44.6281%" y="245" width="7.8512%" height="15" fill="rgb(233,195,10)"/><text x="44.8781%" y="255.50">serde_json:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (38 samples, 7.85%)</title><rect x="44.6281%" y="229" width="7.8512%" height="15" fill="rgb(254,105,3)"/><text x="44.8781%" y="239.50">&lt;&amp;mut serde..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (38 samples, 7.85%)</title><rect x="44.6281%" y="213" width="7.8512%" height="15" fill="rgb(221,225,9)"/><text x="44.8781%" y="223.50">&lt;serde_json..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (21 samples, 4.34%)</title><rect x="48.1405%" y="197" width="4.3388%" height="15" fill="rgb(224,227,45)"/><text x="48.3905%" y="207.50">serde..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 4.34%)</title><rect x="48.1405%" y="181" width="4.3388%" height="15" fill="rgb(229,198,43)"/><text x="48.3905%" y="191.50">alloc..</text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.21%)</title><rect x="52.2727%" y="165" width="0.2066%" height="15" fill="rgb(206,209,35)"/><text x="52.5227%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.21%)</title><rect x="52.2727%" y="149" width="0.2066%" height="15" fill="rgb(245,195,53)"/><text x="52.5227%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::KV&gt;::split/alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.21%)</title><rect x="52.2727%" y="133" width="0.2066%" height="15" fill="rgb(240,92,26)"/><text x="52.5227%" y="143.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.21%)</title><rect x="52.2727%" y="117" width="0.2066%" height="15" fill="rgb(207,40,23)"/><text x="52.5227%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.21%)</title><rect x="52.2727%" y="101" width="0.2066%" height="15" fill="rgb(223,111,35)"/><text x="52.5227%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.21%)</title><rect x="52.2727%" y="85" width="0.2066%" height="15" fill="rgb(229,147,28)"/><text x="52.5227%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.21%)</title><rect x="52.2727%" y="69" width="0.2066%" height="15" fill="rgb(211,29,28)"/><text x="52.5227%" y="79.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1 samples, 0.21%)</title><rect x="52.4793%" y="69" width="0.2066%" height="15" fill="rgb(228,72,33)"/><text x="52.7293%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (1 samples, 0.21%)</title><rect x="52.4793%" y="53" width="0.2066%" height="15" fill="rgb(205,214,31)"/><text x="52.7293%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (1 samples, 0.21%)</title><rect x="52.4793%" y="37" width="0.2066%" height="15" fill="rgb(224,111,15)"/><text x="52.7293%" y="47.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.21%)</title><rect x="52.6860%" y="69" width="0.2066%" height="15" fill="rgb(253,21,26)"/><text x="52.9360%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (1 samples, 0.21%)</title><rect x="52.6860%" y="53" width="0.2066%" height="15" fill="rgb(245,139,43)"/><text x="52.9360%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (1 samples, 0.21%)</title><rect x="52.6860%" y="37" width="0.2066%" height="15" fill="rgb(252,170,7)"/><text x="52.9360%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="52.4793%" y="133" width="0.6198%" height="15" fill="rgb(231,118,14)"/><text x="52.7293%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (3 samples, 0.62%)</title><rect x="52.4793%" y="117" width="0.6198%" height="15" fill="rgb(238,83,0)"/><text x="52.7293%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::replace (3 samples, 0.62%)</title><rect x="52.4793%" y="101" width="0.6198%" height="15" fill="rgb(221,39,39)"/><text x="52.7293%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (3 samples, 0.62%)</title><rect x="52.4793%" y="85" width="0.6198%" height="15" fill="rgb(222,119,46)"/><text x="52.7293%" y="95.50"></text></g><g><title>core::ptr::read (1 samples, 0.21%)</title><rect x="52.8926%" y="69" width="0.2066%" height="15" fill="rgb(222,165,49)"/><text x="53.1426%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.21%)</title><rect x="52.8926%" y="53" width="0.2066%" height="15" fill="rgb(219,113,52)"/><text x="53.1426%" y="63.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.83%)</title><rect x="52.4793%" y="245" width="0.8264%" height="15" fill="rgb(214,7,15)"/><text x="52.7293%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.83%)</title><rect x="52.4793%" y="229" width="0.8264%" height="15" fill="rgb(235,32,4)"/><text x="52.7293%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.83%)</title><rect x="52.4793%" y="213" width="0.8264%" height="15" fill="rgb(238,90,54)"/><text x="52.7293%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.83%)</title><rect x="52.4793%" y="197" width="0.8264%" height="15" fill="rgb(213,208,19)"/><text x="52.7293%" y="207.50"></text></g><g><title>core::mem::drop (4 samples, 0.83%)</title><rect x="52.4793%" y="181" width="0.8264%" height="15" fill="rgb(233,156,4)"/><text x="52.7293%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.83%)</title><rect x="52.4793%" y="165" width="0.8264%" height="15" fill="rgb(207,194,5)"/><text x="52.7293%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.83%)</title><rect x="52.4793%" y="149" width="0.8264%" height="15" fill="rgb(206,111,30)"/><text x="52.7293%" y="159.50"></text></g><g><title>core::mem::drop (1 samples, 0.21%)</title><rect x="53.0992%" y="133" width="0.2066%" height="15" fill="rgb(243,70,54)"/><text x="53.3492%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="53.0992%" y="117" width="0.2066%" height="15" fill="rgb(242,28,8)"/><text x="53.3492%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="53.0992%" y="101" width="0.2066%" height="15" fill="rgb(219,106,18)"/><text x="53.3492%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="53.0992%" y="85" width="0.2066%" height="15" fill="rgb(244,222,10)"/><text x="53.3492%" y="95.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="53.0992%" y="69" width="0.2066%" height="15" fill="rgb(236,179,52)"/><text x="53.3492%" y="79.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="53.0992%" y="53" width="0.2066%" height="15" fill="rgb(213,23,39)"/><text x="53.3492%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.21%)</title><rect x="53.0992%" y="37" width="0.2066%" height="15" fill="rgb(238,48,10)"/><text x="53.3492%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.21%)</title><rect x="53.3058%" y="133" width="0.2066%" height="15" fill="rgb(251,196,23)"/><text x="53.5558%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="53.3058%" y="117" width="0.2066%" height="15" fill="rgb(250,152,24)"/><text x="53.5558%" y="127.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.21%)</title><rect x="53.3058%" y="101" width="0.2066%" height="15" fill="rgb(209,150,17)"/><text x="53.5558%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.21%)</title><rect x="53.3058%" y="85" width="0.2066%" height="15" fill="rgb(234,202,34)"/><text x="53.5558%" y="95.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="53.3058%" y="69" width="0.2066%" height="15" fill="rgb(253,148,53)"/><text x="53.5558%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.21%)</title><rect x="53.3058%" y="53" width="0.2066%" height="15" fill="rgb(218,129,16)"/><text x="53.5558%" y="63.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (1 samples, 0.21%)</title><rect x="53.3058%" y="37" width="0.2066%" height="15" fill="rgb(216,85,19)"/><text x="53.5558%" y="47.50"></text></g><g><title>serde::de::MapAccess::next_entry (2 samples, 0.41%)</title><rect x="53.3058%" y="165" width="0.4132%" height="15" fill="rgb(235,228,7)"/><text x="53.5558%" y="175.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2 samples, 0.41%)</title><rect x="53.3058%" y="149" width="0.4132%" height="15" fill="rgb(245,175,0)"/><text x="53.5558%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.21%)</title><rect x="53.5124%" y="133" width="0.2066%" height="15" fill="rgb(208,168,36)"/><text x="53.7624%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="53.5124%" y="117" width="0.2066%" height="15" fill="rgb(246,171,24)"/><text x="53.7624%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="53.5124%" y="101" width="0.2066%" height="15" fill="rgb(215,142,24)"/><text x="53.7624%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="53.5124%" y="85" width="0.2066%" height="15" fill="rgb(250,187,7)"/><text x="53.7624%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.21%)</title><rect x="53.5124%" y="69" width="0.2066%" height="15" fill="rgb(228,66,33)"/><text x="53.7624%" y="79.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.21%)</title><rect x="53.5124%" y="53" width="0.2066%" height="15" fill="rgb(234,215,21)"/><text x="53.7624%" y="63.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.21%)</title><rect x="53.5124%" y="37" width="0.2066%" height="15" fill="rgb(222,191,20)"/><text x="53.7624%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.83%)</title><rect x="53.7190%" y="37" width="0.8264%" height="15" fill="rgb(245,79,54)"/><text x="53.9690%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (7 samples, 1.45%)</title><rect x="53.7190%" y="69" width="1.4463%" height="15" fill="rgb(240,10,37)"/><text x="53.9690%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 1.45%)</title><rect x="53.7190%" y="53" width="1.4463%" height="15" fill="rgb(214,192,32)"/><text x="53.9690%" y="63.50"></text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.62%)</title><rect x="54.5455%" y="37" width="0.6198%" height="15" fill="rgb(209,36,54)"/><text x="54.7955%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.41%)</title><rect x="55.3719%" y="37" width="0.4132%" height="15" fill="rgb(220,10,11)"/><text x="55.6219%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (4 samples, 0.83%)</title><rect x="55.1653%" y="53" width="0.8264%" height="15" fill="rgb(221,106,17)"/><text x="55.4153%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="55.7851%" y="37" width="0.2066%" height="15" fill="rgb(251,142,44)"/><text x="56.0351%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.21%)</title><rect x="55.9917%" y="37" width="0.2066%" height="15" fill="rgb(238,13,15)"/><text x="56.2417%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.24%)</title><rect x="55.1653%" y="69" width="1.2397%" height="15" fill="rgb(208,107,27)"/><text x="55.4153%" y="79.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="55.9917%" y="53" width="0.4132%" height="15" fill="rgb(205,136,37)"/><text x="56.2417%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.21%)</title><rect x="56.1983%" y="37" width="0.2066%" height="15" fill="rgb(250,205,27)"/><text x="56.4483%" y="47.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (14 samples, 2.89%)</title><rect x="53.7190%" y="133" width="2.8926%" height="15" fill="rgb(210,80,43)"/><text x="53.9690%" y="143.50">al..</text></g><g><title>alloc::collections::btree::search::search_tree (14 samples, 2.89%)</title><rect x="53.7190%" y="117" width="2.8926%" height="15" fill="rgb(247,160,36)"/><text x="53.9690%" y="127.50">al..</text></g><g><title>alloc::collections::btree::search::search_node (14 samples, 2.89%)</title><rect x="53.7190%" y="101" width="2.8926%" height="15" fill="rgb(234,13,49)"/><text x="53.9690%" y="111.50">al..</text></g><g><title>alloc::collections::btree::search::search_linear (14 samples, 2.89%)</title><rect x="53.7190%" y="85" width="2.8926%" height="15" fill="rgb(234,122,0)"/><text x="53.9690%" y="95.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.21%)</title><rect x="56.4050%" y="69" width="0.2066%" height="15" fill="rgb(207,146,38)"/><text x="56.6550%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (1 samples, 0.21%)</title><rect x="56.4050%" y="53" width="0.2066%" height="15" fill="rgb(207,177,25)"/><text x="56.6550%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.21%)</title><rect x="56.4050%" y="37" width="0.2066%" height="15" fill="rgb(211,178,42)"/><text x="56.6550%" y="47.50"></text></g><g><title>start_thread (21 samples, 4.34%)</title><rect x="52.4793%" y="485" width="4.3388%" height="15" fill="rgb(230,69,54)"/><text x="52.7293%" y="495.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (21 samples, 4.34%)</title><rect x="52.4793%" y="469" width="4.3388%" height="15" fill="rgb(214,135,41)"/><text x="52.7293%" y="479.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (21 samples, 4.34%)</title><rect x="52.4793%" y="453" width="4.3388%" height="15" fill="rgb(237,67,25)"/><text x="52.7293%" y="463.50">core:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (21 samples, 4.34%)</title><rect x="52.4793%" y="437" width="4.3388%" height="15" fill="rgb(222,189,50)"/><text x="52.7293%" y="447.50">std::..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (21 samples, 4.34%)</title><rect x="52.4793%" y="421" width="4.3388%" height="15" fill="rgb(245,148,34)"/><text x="52.7293%" y="431.50">test:..</text></g><g><title>core::ops::function::FnOnce::call_once (21 samples, 4.34%)</title><rect x="52.4793%" y="405" width="4.3388%" height="15" fill="rgb(222,29,6)"/><text x="52.7293%" y="415.50">core:..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (21 samples, 4.34%)</title><rect x="52.4793%" y="389" width="4.3388%" height="15" fill="rgb(221,189,43)"/><text x="52.7293%" y="399.50">xword..</text></g><g><title>xwords_rs::tests::find_fill_works (21 samples, 4.34%)</title><rect x="52.4793%" y="373" width="4.3388%" height="15" fill="rgb(207,36,27)"/><text x="52.7293%" y="383.50">xword..</text></g><g><title>xwords_rs::find_fills (21 samples, 4.34%)</title><rect x="52.4793%" y="357" width="4.3388%" height="15" fill="rgb(217,90,24)"/><text x="52.7293%" y="367.50">xword..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (21 samples, 4.34%)</title><rect x="52.4793%" y="341" width="4.3388%" height="15" fill="rgb(224,66,35)"/><text x="52.7293%" y="351.50">&lt;xwor..</text></g><g><title>std::sync::once::Once::call_once (21 samples, 4.34%)</title><rect x="52.4793%" y="325" width="4.3388%" height="15" fill="rgb(221,13,50)"/><text x="52.7293%" y="335.50">std::..</text></g><g><title>std::sync::once::Once::call_inner (21 samples, 4.34%)</title><rect x="52.4793%" y="309" width="4.3388%" height="15" fill="rgb(236,68,49)"/><text x="52.7293%" y="319.50">std::..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (21 samples, 4.34%)</title><rect x="52.4793%" y="293" width="4.3388%" height="15" fill="rgb(229,146,28)"/><text x="52.7293%" y="303.50">std::..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (21 samples, 4.34%)</title><rect x="52.4793%" y="277" width="4.3388%" height="15" fill="rgb(225,31,38)"/><text x="52.7293%" y="287.50">lazy_..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (21 samples, 4.34%)</title><rect x="52.4793%" y="261" width="4.3388%" height="15" fill="rgb(250,208,3)"/><text x="52.7293%" y="271.50">core:..</text></g><g><title>serde_json::de::from_reader (17 samples, 3.51%)</title><rect x="53.3058%" y="245" width="3.5124%" height="15" fill="rgb(246,54,23)"/><text x="53.5558%" y="255.50">ser..</text></g><g><title>serde_json::de::from_trait (17 samples, 3.51%)</title><rect x="53.3058%" y="229" width="3.5124%" height="15" fill="rgb(243,76,11)"/><text x="53.5558%" y="239.50">ser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (17 samples, 3.51%)</title><rect x="53.3058%" y="213" width="3.5124%" height="15" fill="rgb(245,21,50)"/><text x="53.5558%" y="223.50">ser..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 3.51%)</title><rect x="53.3058%" y="197" width="3.5124%" height="15" fill="rgb(228,9,43)"/><text x="53.5558%" y="207.50">&lt;&amp;m..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 3.51%)</title><rect x="53.3058%" y="181" width="3.5124%" height="15" fill="rgb(208,100,47)"/><text x="53.5558%" y="191.50">&lt;se..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (15 samples, 3.10%)</title><rect x="53.7190%" y="165" width="3.0992%" height="15" fill="rgb(232,26,8)"/><text x="53.9690%" y="175.50">ser..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 3.10%)</title><rect x="53.7190%" y="149" width="3.0992%" height="15" fill="rgb(216,166,38)"/><text x="53.9690%" y="159.50">all..</text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.21%)</title><rect x="56.6116%" y="133" width="0.2066%" height="15" fill="rgb(251,202,51)"/><text x="56.8616%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.21%)</title><rect x="56.6116%" y="117" width="0.2066%" height="15" fill="rgb(254,216,34)"/><text x="56.8616%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split/alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.21%)</title><rect x="56.6116%" y="101" width="0.2066%" height="15" fill="rgb(251,32,27)"/><text x="56.8616%" y="111.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.21%)</title><rect x="56.6116%" y="85" width="0.2066%" height="15" fill="rgb(208,127,28)"/><text x="56.8616%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.21%)</title><rect x="56.6116%" y="69" width="0.2066%" height="15" fill="rgb(224,137,22)"/><text x="56.8616%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.21%)</title><rect x="56.6116%" y="53" width="0.2066%" height="15" fill="rgb(254,70,32)"/><text x="56.8616%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.21%)</title><rect x="56.6116%" y="37" width="0.2066%" height="15" fill="rgb(229,75,37)"/><text x="56.8616%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="56.8182%" y="421" width="0.2066%" height="15" fill="rgb(252,64,23)"/><text x="57.0682%" y="431.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="56.8182%" y="405" width="0.2066%" height="15" fill="rgb(232,162,48)"/><text x="57.0682%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="56.8182%" y="389" width="0.2066%" height="15" fill="rgb(246,160,12)"/><text x="57.0682%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="56.8182%" y="373" width="0.2066%" height="15" fill="rgb(247,166,0)"/><text x="57.0682%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="56.8182%" y="357" width="0.2066%" height="15" fill="rgb(249,219,21)"/><text x="57.0682%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="56.8182%" y="341" width="0.2066%" height="15" fill="rgb(205,209,3)"/><text x="57.0682%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="56.8182%" y="325" width="0.2066%" height="15" fill="rgb(243,44,1)"/><text x="57.0682%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="56.8182%" y="309" width="0.2066%" height="15" fill="rgb(206,159,16)"/><text x="57.0682%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="56.8182%" y="293" width="0.2066%" height="15" fill="rgb(244,77,30)"/><text x="57.0682%" y="303.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.21%)</title><rect x="56.8182%" y="277" width="0.2066%" height="15" fill="rgb(218,69,12)"/><text x="57.0682%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.21%)</title><rect x="56.8182%" y="261" width="0.2066%" height="15" fill="rgb(212,87,7)"/><text x="57.0682%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.21%)</title><rect x="56.8182%" y="245" width="0.2066%" height="15" fill="rgb(245,114,25)"/><text x="57.0682%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.21%)</title><rect x="56.8182%" y="229" width="0.2066%" height="15" fill="rgb(210,61,42)"/><text x="57.0682%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.21%)</title><rect x="56.8182%" y="213" width="0.2066%" height="15" fill="rgb(211,52,33)"/><text x="57.0682%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.21%)</title><rect x="56.8182%" y="197" width="0.2066%" height="15" fill="rgb(234,58,33)"/><text x="57.0682%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.21%)</title><rect x="56.8182%" y="181" width="0.2066%" height="15" fill="rgb(220,115,36)"/><text x="57.0682%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.21%)</title><rect x="56.8182%" y="165" width="0.2066%" height="15" fill="rgb(243,153,54)"/><text x="57.0682%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.21%)</title><rect x="56.8182%" y="149" width="0.2066%" height="15" fill="rgb(251,47,18)"/><text x="57.0682%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="56.8182%" y="133" width="0.2066%" height="15" fill="rgb(242,102,42)"/><text x="57.0682%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="56.8182%" y="117" width="0.2066%" height="15" fill="rgb(234,31,38)"/><text x="57.0682%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="56.8182%" y="101" width="0.2066%" height="15" fill="rgb(221,117,51)"/><text x="57.0682%" y="111.50"></text></g><g><title>core::cmp::min (1 samples, 0.21%)</title><rect x="56.8182%" y="85" width="0.2066%" height="15" fill="rgb(212,20,18)"/><text x="57.0682%" y="95.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.21%)</title><rect x="56.8182%" y="69" width="0.2066%" height="15" fill="rgb(245,133,36)"/><text x="57.0682%" y="79.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.21%)</title><rect x="56.8182%" y="53" width="0.2066%" height="15" fill="rgb(212,6,19)"/><text x="57.0682%" y="63.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.21%)</title><rect x="56.8182%" y="37" width="0.2066%" height="15" fill="rgb(218,1,36)"/><text x="57.0682%" y="47.50"></text></g><g><title>std::sync::once::Once::call_inner (2 samples, 0.41%)</title><rect x="56.8182%" y="485" width="0.4132%" height="15" fill="rgb(246,84,54)"/><text x="57.0682%" y="495.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (2 samples, 0.41%)</title><rect x="56.8182%" y="469" width="0.4132%" height="15" fill="rgb(242,110,6)"/><text x="57.0682%" y="479.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (2 samples, 0.41%)</title><rect x="56.8182%" y="453" width="0.4132%" height="15" fill="rgb(214,47,5)"/><text x="57.0682%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (2 samples, 0.41%)</title><rect x="56.8182%" y="437" width="0.4132%" height="15" fill="rgb(218,159,25)"/><text x="57.0682%" y="447.50"></text></g><g><title>serde_json::de::from_reader (1 samples, 0.21%)</title><rect x="57.0248%" y="421" width="0.2066%" height="15" fill="rgb(215,211,28)"/><text x="57.2748%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.21%)</title><rect x="57.0248%" y="405" width="0.2066%" height="15" fill="rgb(238,59,32)"/><text x="57.2748%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="57.0248%" y="389" width="0.2066%" height="15" fill="rgb(226,82,3)"/><text x="57.2748%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="57.0248%" y="373" width="0.2066%" height="15" fill="rgb(240,164,32)"/><text x="57.2748%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.21%)</title><rect x="57.0248%" y="357" width="0.2066%" height="15" fill="rgb(232,46,7)"/><text x="57.2748%" y="367.50"></text></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.21%)</title><rect x="57.0248%" y="341" width="0.2066%" height="15" fill="rgb(229,129,53)"/><text x="57.2748%" y="351.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.21%)</title><rect x="57.0248%" y="325" width="0.2066%" height="15" fill="rgb(234,188,29)"/><text x="57.2748%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.21%)</title><rect x="57.0248%" y="309" width="0.2066%" height="15" fill="rgb(246,141,4)"/><text x="57.2748%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="57.0248%" y="293" width="0.2066%" height="15" fill="rgb(229,23,39)"/><text x="57.2748%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.21%)</title><rect x="57.0248%" y="277" width="0.2066%" height="15" fill="rgb(206,12,3)"/><text x="57.2748%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.21%)</title><rect x="57.0248%" y="261" width="0.2066%" height="15" fill="rgb(252,226,20)"/><text x="57.2748%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="57.0248%" y="245" width="0.2066%" height="15" fill="rgb(216,123,35)"/><text x="57.2748%" y="255.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.21%)</title><rect x="57.0248%" y="229" width="0.2066%" height="15" fill="rgb(212,68,40)"/><text x="57.2748%" y="239.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.21%)</title><rect x="57.0248%" y="213" width="0.2066%" height="15" fill="rgb(254,125,32)"/><text x="57.2748%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.21%)</title><rect x="57.0248%" y="197" width="0.2066%" height="15" fill="rgb(253,97,22)"/><text x="57.2748%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.21%)</title><rect x="57.0248%" y="181" width="0.2066%" height="15" fill="rgb(241,101,14)"/><text x="57.2748%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.21%)</title><rect x="57.0248%" y="165" width="0.2066%" height="15" fill="rgb(238,103,29)"/><text x="57.2748%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.21%)</title><rect x="57.0248%" y="149" width="0.2066%" height="15" fill="rgb(233,195,47)"/><text x="57.2748%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.21%)</title><rect x="57.0248%" y="133" width="0.2066%" height="15" fill="rgb(246,218,30)"/><text x="57.2748%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.21%)</title><rect x="57.0248%" y="117" width="0.2066%" height="15" fill="rgb(219,145,47)"/><text x="57.2748%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.21%)</title><rect x="57.0248%" y="101" width="0.2066%" height="15" fill="rgb(243,12,26)"/><text x="57.2748%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.21%)</title><rect x="57.0248%" y="85" width="0.2066%" height="15" fill="rgb(214,87,16)"/><text x="57.2748%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1 samples, 0.21%)</title><rect x="57.0248%" y="69" width="0.2066%" height="15" fill="rgb(208,99,42)"/><text x="57.2748%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align (1 samples, 0.21%)</title><rect x="57.0248%" y="53" width="0.2066%" height="15" fill="rgb(253,99,2)"/><text x="57.2748%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.21%)</title><rect x="57.0248%" y="37" width="0.2066%" height="15" fill="rgb(220,168,23)"/><text x="57.2748%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.41%)</title><rect x="57.2314%" y="133" width="0.4132%" height="15" fill="rgb(242,38,24)"/><text x="57.4814%" y="143.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.41%)</title><rect x="57.2314%" y="117" width="0.4132%" height="15" fill="rgb(225,182,9)"/><text x="57.4814%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.41%)</title><rect x="57.2314%" y="101" width="0.4132%" height="15" fill="rgb(243,178,37)"/><text x="57.4814%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.41%)</title><rect x="57.2314%" y="85" width="0.4132%" height="15" fill="rgb(232,139,19)"/><text x="57.4814%" y="95.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.41%)</title><rect x="57.2314%" y="69" width="0.4132%" height="15" fill="rgb(225,201,24)"/><text x="57.4814%" y="79.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (2 samples, 0.41%)</title><rect x="57.2314%" y="53" width="0.4132%" height="15" fill="rgb(221,47,46)"/><text x="57.4814%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.41%)</title><rect x="57.2314%" y="37" width="0.4132%" height="15" fill="rgb(249,23,13)"/><text x="57.4814%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (25 samples, 5.17%)</title><rect x="57.2314%" y="149" width="5.1653%" height="15" fill="rgb(219,9,5)"/><text x="57.4814%" y="159.50">&lt;serde..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (23 samples, 4.75%)</title><rect x="57.6446%" y="133" width="4.7521%" height="15" fill="rgb(254,171,16)"/><text x="57.8946%" y="143.50">serde_..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (23 samples, 4.75%)</title><rect x="57.6446%" y="117" width="4.7521%" height="15" fill="rgb(230,171,20)"/><text x="57.8946%" y="127.50">serde_..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (23 samples, 4.75%)</title><rect x="57.6446%" y="101" width="4.7521%" height="15" fill="rgb(210,71,41)"/><text x="57.8946%" y="111.50">&lt;serde..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 4.75%)</title><rect x="57.6446%" y="85" width="4.7521%" height="15" fill="rgb(206,173,20)"/><text x="57.8946%" y="95.50">&lt;serde..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 4.75%)</title><rect x="57.6446%" y="69" width="4.7521%" height="15" fill="rgb(233,88,34)"/><text x="57.8946%" y="79.50">&lt;std::..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (23 samples, 4.75%)</title><rect x="57.6446%" y="53" width="4.7521%" height="15" fill="rgb(223,209,46)"/><text x="57.8946%" y="63.50">&lt;std::..</text></g><g><title>serde::de::MapAccess::next_entry (26 samples, 5.37%)</title><rect x="57.2314%" y="181" width="5.3719%" height="15" fill="rgb(250,43,18)"/><text x="57.4814%" y="191.50">serde::..</text></g><g><title>serde::de::MapAccess::next_entry_seed (26 samples, 5.37%)</title><rect x="57.2314%" y="165" width="5.3719%" height="15" fill="rgb(208,13,10)"/><text x="57.4814%" y="175.50">serde::..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.21%)</title><rect x="62.3967%" y="149" width="0.2066%" height="15" fill="rgb(212,200,36)"/><text x="62.6467%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="62.3967%" y="133" width="0.2066%" height="15" fill="rgb(225,90,30)"/><text x="62.6467%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="62.3967%" y="117" width="0.2066%" height="15" fill="rgb(236,182,39)"/><text x="62.6467%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="62.3967%" y="101" width="0.2066%" height="15" fill="rgb(212,144,35)"/><text x="62.6467%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="62.3967%" y="85" width="0.2066%" height="15" fill="rgb(228,63,44)"/><text x="62.6467%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="62.3967%" y="69" width="0.2066%" height="15" fill="rgb(228,109,6)"/><text x="62.6467%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="62.3967%" y="53" width="0.2066%" height="15" fill="rgb(238,117,24)"/><text x="62.6467%" y="63.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="62.3967%" y="37" width="0.2066%" height="15" fill="rgb(242,26,26)"/><text x="62.6467%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="62.6033%" y="37" width="0.2066%" height="15" fill="rgb(221,92,48)"/><text x="62.8533%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 1.24%)</title><rect x="62.6033%" y="53" width="1.2397%" height="15" fill="rgb(209,209,32)"/><text x="62.8533%" y="63.50"></text></g><g><title>core::slice::from_raw_parts (5 samples, 1.03%)</title><rect x="62.8099%" y="37" width="1.0331%" height="15" fill="rgb(221,70,22)"/><text x="63.0599%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (11 samples, 2.27%)</title><rect x="62.6033%" y="85" width="2.2727%" height="15" fill="rgb(248,145,5)"/><text x="62.8533%" y="95.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (11 samples, 2.27%)</title><rect x="62.6033%" y="69" width="2.2727%" height="15" fill="rgb(226,116,26)"/><text x="62.8533%" y="79.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (5 samples, 1.03%)</title><rect x="63.8430%" y="53" width="1.0331%" height="15" fill="rgb(244,5,17)"/><text x="64.0930%" y="63.50"></text></g><g><title>&lt;u8 as core::slice::SliceOrd&gt;::compare (4 samples, 0.83%)</title><rect x="64.0496%" y="37" width="0.8264%" height="15" fill="rgb(252,159,33)"/><text x="64.2996%" y="47.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (38 samples, 7.85%)</title><rect x="57.2314%" y="485" width="7.8512%" height="15" fill="rgb(206,71,0)"/><text x="57.4814%" y="495.50">std::sys::u..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (38 samples, 7.85%)</title><rect x="57.2314%" y="469" width="7.8512%" height="15" fill="rgb(233,118,54)"/><text x="57.4814%" y="479.50">core::ops::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38 samples, 7.85%)</title><rect x="57.2314%" y="453" width="7.8512%" height="15" fill="rgb(234,83,48)"/><text x="57.4814%" y="463.50">std::sys_co..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (38 samples, 7.85%)</title><rect x="57.2314%" y="437" width="7.8512%" height="15" fill="rgb(228,3,54)"/><text x="57.4814%" y="447.50">test::run_t..</text></g><g><title>core::ops::function::FnOnce::call_once (38 samples, 7.85%)</title><rect x="57.2314%" y="421" width="7.8512%" height="15" fill="rgb(226,155,13)"/><text x="57.4814%" y="431.50">core::ops::..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (38 samples, 7.85%)</title><rect x="57.2314%" y="405" width="7.8512%" height="15" fill="rgb(241,28,37)"/><text x="57.4814%" y="415.50">xwords_rs::..</text></g><g><title>xwords_rs::tests::find_fill_works (38 samples, 7.85%)</title><rect x="57.2314%" y="389" width="7.8512%" height="15" fill="rgb(233,93,10)"/><text x="57.4814%" y="399.50">xwords_rs::..</text></g><g><title>xwords_rs::find_fills (38 samples, 7.85%)</title><rect x="57.2314%" y="373" width="7.8512%" height="15" fill="rgb(225,113,19)"/><text x="57.4814%" y="383.50">xwords_rs::..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (38 samples, 7.85%)</title><rect x="57.2314%" y="357" width="7.8512%" height="15" fill="rgb(241,2,18)"/><text x="57.4814%" y="367.50">&lt;xwords_rs:..</text></g><g><title>std::sync::once::Once::call_once (38 samples, 7.85%)</title><rect x="57.2314%" y="341" width="7.8512%" height="15" fill="rgb(228,207,21)"/><text x="57.4814%" y="351.50">std::sync::..</text></g><g><title>std::sync::once::Once::call_inner (38 samples, 7.85%)</title><rect x="57.2314%" y="325" width="7.8512%" height="15" fill="rgb(213,211,35)"/><text x="57.4814%" y="335.50">std::sync::..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (38 samples, 7.85%)</title><rect x="57.2314%" y="309" width="7.8512%" height="15" fill="rgb(209,83,10)"/><text x="57.4814%" y="319.50">std::sync::..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (38 samples, 7.85%)</title><rect x="57.2314%" y="293" width="7.8512%" height="15" fill="rgb(209,164,1)"/><text x="57.4814%" y="303.50">lazy_static..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (38 samples, 7.85%)</title><rect x="57.2314%" y="277" width="7.8512%" height="15" fill="rgb(213,184,43)"/><text x="57.4814%" y="287.50">core::ops::..</text></g><g><title>serde_json::de::from_reader (38 samples, 7.85%)</title><rect x="57.2314%" y="261" width="7.8512%" height="15" fill="rgb(231,61,34)"/><text x="57.4814%" y="271.50">serde_json:..</text></g><g><title>serde_json::de::from_trait (38 samples, 7.85%)</title><rect x="57.2314%" y="245" width="7.8512%" height="15" fill="rgb(235,75,3)"/><text x="57.4814%" y="255.50">serde_json:..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (38 samples, 7.85%)</title><rect x="57.2314%" y="229" width="7.8512%" height="15" fill="rgb(220,106,47)"/><text x="57.4814%" y="239.50">serde_json:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (38 samples, 7.85%)</title><rect x="57.2314%" y="213" width="7.8512%" height="15" fill="rgb(210,196,33)"/><text x="57.4814%" y="223.50">&lt;&amp;mut serde..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (38 samples, 7.85%)</title><rect x="57.2314%" y="197" width="7.8512%" height="15" fill="rgb(229,154,42)"/><text x="57.4814%" y="207.50">&lt;serde_json..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (12 samples, 2.48%)</title><rect x="62.6033%" y="181" width="2.4793%" height="15" fill="rgb(228,114,26)"/><text x="62.8533%" y="191.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (12 samples, 2.48%)</title><rect x="62.6033%" y="165" width="2.4793%" height="15" fill="rgb(208,144,1)"/><text x="62.8533%" y="175.50">al..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (12 samples, 2.48%)</title><rect x="62.6033%" y="149" width="2.4793%" height="15" fill="rgb(239,112,37)"/><text x="62.8533%" y="159.50">al..</text></g><g><title>alloc::collections::btree::search::search_tree (12 samples, 2.48%)</title><rect x="62.6033%" y="133" width="2.4793%" height="15" fill="rgb(210,96,50)"/><text x="62.8533%" y="143.50">al..</text></g><g><title>alloc::collections::btree::search::search_node (12 samples, 2.48%)</title><rect x="62.6033%" y="117" width="2.4793%" height="15" fill="rgb(222,178,2)"/><text x="62.8533%" y="127.50">al..</text></g><g><title>alloc::collections::btree::search::search_linear (12 samples, 2.48%)</title><rect x="62.6033%" y="101" width="2.4793%" height="15" fill="rgb(226,74,18)"/><text x="62.8533%" y="111.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::keys (1 samples, 0.21%)</title><rect x="64.8760%" y="85" width="0.2066%" height="15" fill="rgb(225,67,54)"/><text x="65.1260%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (1 samples, 0.21%)</title><rect x="64.8760%" y="69" width="0.2066%" height="15" fill="rgb(251,92,32)"/><text x="65.1260%" y="79.50"></text></g><g><title>core::slice::from_raw_parts (1 samples, 0.21%)</title><rect x="64.8760%" y="53" width="0.2066%" height="15" fill="rgb(228,149,22)"/><text x="65.1260%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.21%)</title><rect x="64.8760%" y="37" width="0.2066%" height="15" fill="rgb(243,54,13)"/><text x="65.1260%" y="47.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1 samples, 0.21%)</title><rect x="65.2893%" y="37" width="0.2066%" height="15" fill="rgb(243,180,28)"/><text x="65.5393%" y="47.50"></text></g><g><title>&lt;serde_json::map::Keys as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="65.0826%" y="149" width="0.6198%" height="15" fill="rgb(208,167,24)"/><text x="65.3326%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="65.0826%" y="133" width="0.6198%" height="15" fill="rgb(245,73,45)"/><text x="65.3326%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.62%)</title><rect x="65.0826%" y="117" width="0.6198%" height="15" fill="rgb(237,203,48)"/><text x="65.3326%" y="127.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (3 samples, 0.62%)</title><rect x="65.0826%" y="101" width="0.6198%" height="15" fill="rgb(211,197,16)"/><text x="65.3326%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (3 samples, 0.62%)</title><rect x="65.0826%" y="85" width="0.6198%" height="15" fill="rgb(243,99,51)"/><text x="65.3326%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::replace (3 samples, 0.62%)</title><rect x="65.0826%" y="69" width="0.6198%" height="15" fill="rgb(215,123,29)"/><text x="65.3326%" y="79.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (3 samples, 0.62%)</title><rect x="65.0826%" y="53" width="0.6198%" height="15" fill="rgb(239,186,37)"/><text x="65.3326%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.21%)</title><rect x="65.4959%" y="37" width="0.2066%" height="15" fill="rgb(252,136,39)"/><text x="65.7459%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.21%)</title><rect x="65.7025%" y="37" width="0.2066%" height="15" fill="rgb(223,213,32)"/><text x="65.9525%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 1.03%)</title><rect x="65.0826%" y="293" width="1.0331%" height="15" fill="rgb(233,115,5)"/><text x="65.3326%" y="303.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 1.03%)</title><rect x="65.0826%" y="277" width="1.0331%" height="15" fill="rgb(207,226,44)"/><text x="65.3326%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="65.0826%" y="261" width="1.0331%" height="15" fill="rgb(208,126,0)"/><text x="65.3326%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="65.0826%" y="245" width="1.0331%" height="15" fill="rgb(244,66,21)"/><text x="65.3326%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.03%)</title><rect x="65.0826%" y="229" width="1.0331%" height="15" fill="rgb(222,97,12)"/><text x="65.3326%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 1.03%)</title><rect x="65.0826%" y="213" width="1.0331%" height="15" fill="rgb(219,213,19)"/><text x="65.3326%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.03%)</title><rect x="65.0826%" y="197" width="1.0331%" height="15" fill="rgb(252,169,30)"/><text x="65.3326%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.03%)</title><rect x="65.0826%" y="181" width="1.0331%" height="15" fill="rgb(206,32,51)"/><text x="65.3326%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 1.03%)</title><rect x="65.0826%" y="165" width="1.0331%" height="15" fill="rgb(250,172,42)"/><text x="65.3326%" y="175.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.41%)</title><rect x="65.7025%" y="149" width="0.4132%" height="15" fill="rgb(209,34,43)"/><text x="65.9525%" y="159.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.41%)</title><rect x="65.7025%" y="133" width="0.4132%" height="15" fill="rgb(223,11,35)"/><text x="65.9525%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.41%)</title><rect x="65.7025%" y="117" width="0.4132%" height="15" fill="rgb(251,219,26)"/><text x="65.9525%" y="127.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2 samples, 0.41%)</title><rect x="65.7025%" y="101" width="0.4132%" height="15" fill="rgb(231,119,3)"/><text x="65.9525%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.41%)</title><rect x="65.7025%" y="85" width="0.4132%" height="15" fill="rgb(216,97,11)"/><text x="65.9525%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.41%)</title><rect x="65.7025%" y="69" width="0.4132%" height="15" fill="rgb(223,59,9)"/><text x="65.9525%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (2 samples, 0.41%)</title><rect x="65.7025%" y="53" width="0.4132%" height="15" fill="rgb(233,93,31)"/><text x="65.9525%" y="63.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.21%)</title><rect x="65.9091%" y="37" width="0.2066%" height="15" fill="rgb(239,81,33)"/><text x="66.1591%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.21%)</title><rect x="66.1157%" y="69" width="0.2066%" height="15" fill="rgb(213,120,34)"/><text x="66.3657%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.21%)</title><rect x="66.1157%" y="53" width="0.2066%" height="15" fill="rgb(243,49,53)"/><text x="66.3657%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.21%)</title><rect x="66.1157%" y="37" width="0.2066%" height="15" fill="rgb(247,216,33)"/><text x="66.3657%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.41%)</title><rect x="66.3223%" y="69" width="0.4132%" height="15" fill="rgb(226,26,14)"/><text x="66.5723%" y="79.50"></text></g><g><title>serde_json::read::as_str (2 samples, 0.41%)</title><rect x="66.3223%" y="53" width="0.4132%" height="15" fill="rgb(215,49,53)"/><text x="66.5723%" y="63.50"></text></g><g><title>core::str::from_utf8 (1 samples, 0.21%)</title><rect x="66.5289%" y="37" width="0.2066%" height="15" fill="rgb(245,162,40)"/><text x="66.7789%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (5 samples, 1.03%)</title><rect x="66.1157%" y="181" width="1.0331%" height="15" fill="rgb(229,68,17)"/><text x="66.3657%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 1.03%)</title><rect x="66.1157%" y="165" width="1.0331%" height="15" fill="rgb(213,182,10)"/><text x="66.3657%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (5 samples, 1.03%)</title><rect x="66.1157%" y="149" width="1.0331%" height="15" fill="rgb(245,125,30)"/><text x="66.3657%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (5 samples, 1.03%)</title><rect x="66.1157%" y="133" width="1.0331%" height="15" fill="rgb(232,202,2)"/><text x="66.3657%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 1.03%)</title><rect x="66.1157%" y="117" width="1.0331%" height="15" fill="rgb(237,140,51)"/><text x="66.3657%" y="127.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (5 samples, 1.03%)</title><rect x="66.1157%" y="101" width="1.0331%" height="15" fill="rgb(236,157,25)"/><text x="66.3657%" y="111.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (5 samples, 1.03%)</title><rect x="66.1157%" y="85" width="1.0331%" height="15" fill="rgb(219,209,0)"/><text x="66.3657%" y="95.50"></text></g><g><title>serde_json::read::next_or_eof (2 samples, 0.41%)</title><rect x="66.7355%" y="69" width="0.4132%" height="15" fill="rgb(240,116,54)"/><text x="66.9855%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (2 samples, 0.41%)</title><rect x="66.7355%" y="53" width="0.4132%" height="15" fill="rgb(216,10,36)"/><text x="66.9855%" y="63.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="66.7355%" y="37" width="0.4132%" height="15" fill="rgb(222,72,44)"/><text x="66.9855%" y="47.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.21%)</title><rect x="67.1488%" y="117" width="0.2066%" height="15" fill="rgb(232,159,9)"/><text x="67.3988%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.21%)</title><rect x="67.1488%" y="101" width="0.2066%" height="15" fill="rgb(210,39,32)"/><text x="67.3988%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.21%)</title><rect x="67.1488%" y="85" width="0.2066%" height="15" fill="rgb(216,194,45)"/><text x="67.3988%" y="95.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="67.1488%" y="69" width="0.2066%" height="15" fill="rgb(218,18,35)"/><text x="67.3988%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="67.1488%" y="53" width="0.2066%" height="15" fill="rgb(207,83,51)"/><text x="67.3988%" y="63.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="67.1488%" y="37" width="0.2066%" height="15" fill="rgb(225,63,43)"/><text x="67.3988%" y="47.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.21%)</title><rect x="67.3554%" y="37" width="0.2066%" height="15" fill="rgb(207,57,36)"/><text x="67.6054%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.62%)</title><rect x="67.1488%" y="165" width="0.6198%" height="15" fill="rgb(216,99,33)"/><text x="67.3988%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.62%)</title><rect x="67.1488%" y="149" width="0.6198%" height="15" fill="rgb(225,42,16)"/><text x="67.3988%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.62%)</title><rect x="67.1488%" y="133" width="0.6198%" height="15" fill="rgb(220,201,45)"/><text x="67.3988%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.41%)</title><rect x="67.3554%" y="117" width="0.4132%" height="15" fill="rgb(225,33,4)"/><text x="67.6054%" y="127.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.41%)</title><rect x="67.3554%" y="101" width="0.4132%" height="15" fill="rgb(224,33,50)"/><text x="67.6054%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.41%)</title><rect x="67.3554%" y="85" width="0.4132%" height="15" fill="rgb(246,198,51)"/><text x="67.6054%" y="95.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="67.3554%" y="69" width="0.4132%" height="15" fill="rgb(205,22,4)"/><text x="67.6054%" y="79.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="67.3554%" y="53" width="0.4132%" height="15" fill="rgb(206,3,8)"/><text x="67.6054%" y="63.50"></text></g><g><title>core::slice::from_mut (1 samples, 0.21%)</title><rect x="67.5620%" y="37" width="0.2066%" height="15" fill="rgb(251,23,15)"/><text x="67.8120%" y="47.50"></text></g><g><title>serde::de::MapAccess::next_entry (9 samples, 1.86%)</title><rect x="66.1157%" y="213" width="1.8595%" height="15" fill="rgb(252,88,28)"/><text x="66.3657%" y="223.50">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (9 samples, 1.86%)</title><rect x="66.1157%" y="197" width="1.8595%" height="15" fill="rgb(212,127,14)"/><text x="66.3657%" y="207.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.83%)</title><rect x="67.1488%" y="181" width="0.8264%" height="15" fill="rgb(247,145,37)"/><text x="67.3988%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.21%)</title><rect x="67.7686%" y="165" width="0.2066%" height="15" fill="rgb(209,117,53)"/><text x="68.0186%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.21%)</title><rect x="67.7686%" y="149" width="0.2066%" height="15" fill="rgb(212,90,42)"/><text x="68.0186%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="67.7686%" y="133" width="0.2066%" height="15" fill="rgb(218,164,37)"/><text x="68.0186%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="67.7686%" y="117" width="0.2066%" height="15" fill="rgb(246,65,34)"/><text x="68.0186%" y="127.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="67.7686%" y="101" width="0.2066%" height="15" fill="rgb(231,100,33)"/><text x="68.0186%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="67.7686%" y="85" width="0.2066%" height="15" fill="rgb(228,126,14)"/><text x="68.0186%" y="95.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (1 samples, 0.21%)</title><rect x="67.7686%" y="69" width="0.2066%" height="15" fill="rgb(215,173,21)"/><text x="68.0186%" y="79.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.21%)</title><rect x="67.7686%" y="53" width="0.2066%" height="15" fill="rgb(210,6,40)"/><text x="68.0186%" y="63.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 3.10%)</title><rect x="65.0826%" y="485" width="3.0992%" height="15" fill="rgb(212,48,18)"/><text x="65.3326%" y="495.50">std..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (15 samples, 3.10%)</title><rect x="65.0826%" y="469" width="3.0992%" height="15" fill="rgb(230,214,11)"/><text x="65.3326%" y="479.50">tes..</text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 3.10%)</title><rect x="65.0826%" y="453" width="3.0992%" height="15" fill="rgb(254,105,39)"/><text x="65.3326%" y="463.50">cor..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (15 samples, 3.10%)</title><rect x="65.0826%" y="437" width="3.0992%" height="15" fill="rgb(245,158,5)"/><text x="65.3326%" y="447.50">xwo..</text></g><g><title>xwords_rs::tests::find_fill_works (15 samples, 3.10%)</title><rect x="65.0826%" y="421" width="3.0992%" height="15" fill="rgb(249,208,11)"/><text x="65.3326%" y="431.50">xwo..</text></g><g><title>xwords_rs::find_fills (15 samples, 3.10%)</title><rect x="65.0826%" y="405" width="3.0992%" height="15" fill="rgb(210,39,28)"/><text x="65.3326%" y="415.50">xwo..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (15 samples, 3.10%)</title><rect x="65.0826%" y="389" width="3.0992%" height="15" fill="rgb(211,56,53)"/><text x="65.3326%" y="399.50">&lt;xw..</text></g><g><title>std::sync::once::Once::call_once (15 samples, 3.10%)</title><rect x="65.0826%" y="373" width="3.0992%" height="15" fill="rgb(226,201,30)"/><text x="65.3326%" y="383.50">std..</text></g><g><title>std::sync::once::Once::call_inner (15 samples, 3.10%)</title><rect x="65.0826%" y="357" width="3.0992%" height="15" fill="rgb(239,101,34)"/><text x="65.3326%" y="367.50">std..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (15 samples, 3.10%)</title><rect x="65.0826%" y="341" width="3.0992%" height="15" fill="rgb(226,209,5)"/><text x="65.3326%" y="351.50">std..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (15 samples, 3.10%)</title><rect x="65.0826%" y="325" width="3.0992%" height="15" fill="rgb(250,105,47)"/><text x="65.3326%" y="335.50">laz..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (15 samples, 3.10%)</title><rect x="65.0826%" y="309" width="3.0992%" height="15" fill="rgb(230,72,3)"/><text x="65.3326%" y="319.50">cor..</text></g><g><title>serde_json::de::from_reader (10 samples, 2.07%)</title><rect x="66.1157%" y="293" width="2.0661%" height="15" fill="rgb(232,218,39)"/><text x="66.3657%" y="303.50">s..</text></g><g><title>serde_json::de::from_trait (10 samples, 2.07%)</title><rect x="66.1157%" y="277" width="2.0661%" height="15" fill="rgb(248,166,6)"/><text x="66.3657%" y="287.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 2.07%)</title><rect x="66.1157%" y="261" width="2.0661%" height="15" fill="rgb(247,89,20)"/><text x="66.3657%" y="271.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 2.07%)</title><rect x="66.1157%" y="245" width="2.0661%" height="15" fill="rgb(248,130,54)"/><text x="66.3657%" y="255.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 2.07%)</title><rect x="66.1157%" y="229" width="2.0661%" height="15" fill="rgb(234,196,4)"/><text x="66.3657%" y="239.50">&lt;..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1 samples, 0.21%)</title><rect x="67.9752%" y="213" width="0.2066%" height="15" fill="rgb(250,143,31)"/><text x="68.2252%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.21%)</title><rect x="67.9752%" y="197" width="0.2066%" height="15" fill="rgb(211,110,34)"/><text x="68.2252%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (1 samples, 0.21%)</title><rect x="67.9752%" y="181" width="0.2066%" height="15" fill="rgb(215,124,48)"/><text x="68.2252%" y="191.50"></text></g><g><title>alloc::collections::btree::search::search_tree (1 samples, 0.21%)</title><rect x="67.9752%" y="165" width="0.2066%" height="15" fill="rgb(216,46,13)"/><text x="68.2252%" y="175.50"></text></g><g><title>alloc::collections::btree::search::search_node (1 samples, 0.21%)</title><rect x="67.9752%" y="149" width="0.2066%" height="15" fill="rgb(205,184,25)"/><text x="68.2252%" y="159.50"></text></g><g><title>alloc::collections::btree::search::search_linear (1 samples, 0.21%)</title><rect x="67.9752%" y="133" width="0.2066%" height="15" fill="rgb(228,1,10)"/><text x="68.2252%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.21%)</title><rect x="67.9752%" y="117" width="0.2066%" height="15" fill="rgb(213,116,27)"/><text x="68.2252%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.21%)</title><rect x="67.9752%" y="101" width="0.2066%" height="15" fill="rgb(241,95,50)"/><text x="68.2252%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.21%)</title><rect x="67.9752%" y="85" width="0.2066%" height="15" fill="rgb(238,48,32)"/><text x="68.2252%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="67.9752%" y="69" width="0.2066%" height="15" fill="rgb(235,113,49)"/><text x="68.2252%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.21%)</title><rect x="67.9752%" y="53" width="0.2066%" height="15" fill="rgb(205,127,43)"/><text x="68.2252%" y="63.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="67.9752%" y="37" width="0.2066%" height="15" fill="rgb(250,162,2)"/><text x="68.2252%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.21%)</title><rect x="68.1818%" y="85" width="0.2066%" height="15" fill="rgb(220,13,41)"/><text x="68.4318%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.21%)</title><rect x="68.1818%" y="69" width="0.2066%" height="15" fill="rgb(249,221,25)"/><text x="68.4318%" y="79.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.21%)</title><rect x="68.1818%" y="53" width="0.2066%" height="15" fill="rgb(215,208,19)"/><text x="68.4318%" y="63.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="68.1818%" y="37" width="0.2066%" height="15" fill="rgb(236,175,2)"/><text x="68.4318%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.21%)</title><rect x="68.3884%" y="85" width="0.2066%" height="15" fill="rgb(241,52,2)"/><text x="68.6384%" y="95.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.21%)</title><rect x="68.3884%" y="69" width="0.2066%" height="15" fill="rgb(248,140,14)"/><text x="68.6384%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.21%)</title><rect x="68.3884%" y="53" width="0.2066%" height="15" fill="rgb(253,22,42)"/><text x="68.6384%" y="63.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.21%)</title><rect x="68.3884%" y="37" width="0.2066%" height="15" fill="rgb(234,61,47)"/><text x="68.6384%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 0.21%)</title><rect x="68.5950%" y="69" width="0.2066%" height="15" fill="rgb(208,226,15)"/><text x="68.8450%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.21%)</title><rect x="68.5950%" y="53" width="0.2066%" height="15" fill="rgb(217,221,4)"/><text x="68.8450%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.21%)</title><rect x="68.5950%" y="37" width="0.2066%" height="15" fill="rgb(212,174,34)"/><text x="68.8450%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.83%)</title><rect x="68.1818%" y="309" width="0.8264%" height="15" fill="rgb(253,83,4)"/><text x="68.4318%" y="319.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.83%)</title><rect x="68.1818%" y="293" width="0.8264%" height="15" fill="rgb(250,195,49)"/><text x="68.4318%" y="303.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.83%)</title><rect x="68.1818%" y="277" width="0.8264%" height="15" fill="rgb(241,192,25)"/><text x="68.4318%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.83%)</title><rect x="68.1818%" y="261" width="0.8264%" height="15" fill="rgb(208,124,10)"/><text x="68.4318%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.83%)</title><rect x="68.1818%" y="245" width="0.8264%" height="15" fill="rgb(222,33,0)"/><text x="68.4318%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.83%)</title><rect x="68.1818%" y="229" width="0.8264%" height="15" fill="rgb(234,209,28)"/><text x="68.4318%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.83%)</title><rect x="68.1818%" y="213" width="0.8264%" height="15" fill="rgb(224,11,23)"/><text x="68.4318%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.83%)</title><rect x="68.1818%" y="197" width="0.8264%" height="15" fill="rgb(232,99,1)"/><text x="68.4318%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.83%)</title><rect x="68.1818%" y="181" width="0.8264%" height="15" fill="rgb(237,95,45)"/><text x="68.4318%" y="191.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="68.1818%" y="165" width="0.8264%" height="15" fill="rgb(208,109,11)"/><text x="68.4318%" y="175.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (4 samples, 0.83%)</title><rect x="68.1818%" y="149" width="0.8264%" height="15" fill="rgb(216,190,48)"/><text x="68.4318%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.83%)</title><rect x="68.1818%" y="133" width="0.8264%" height="15" fill="rgb(251,171,36)"/><text x="68.4318%" y="143.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (4 samples, 0.83%)</title><rect x="68.1818%" y="117" width="0.8264%" height="15" fill="rgb(230,62,22)"/><text x="68.4318%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.83%)</title><rect x="68.1818%" y="101" width="0.8264%" height="15" fill="rgb(225,114,35)"/><text x="68.4318%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.41%)</title><rect x="68.5950%" y="85" width="0.4132%" height="15" fill="rgb(215,118,42)"/><text x="68.8450%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (1 samples, 0.21%)</title><rect x="68.8017%" y="69" width="0.2066%" height="15" fill="rgb(243,119,21)"/><text x="69.0517%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 0.21%)</title><rect x="68.8017%" y="53" width="0.2066%" height="15" fill="rgb(252,177,53)"/><text x="69.0517%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.21%)</title><rect x="68.8017%" y="37" width="0.2066%" height="15" fill="rgb(237,209,29)"/><text x="69.0517%" y="47.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="69.0083%" y="53" width="0.2066%" height="15" fill="rgb(212,65,23)"/><text x="69.2583%" y="63.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="69.0083%" y="37" width="0.2066%" height="15" fill="rgb(230,222,46)"/><text x="69.2583%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.41%)</title><rect x="69.0083%" y="197" width="0.4132%" height="15" fill="rgb(215,135,32)"/><text x="69.2583%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.41%)</title><rect x="69.0083%" y="181" width="0.4132%" height="15" fill="rgb(246,101,22)"/><text x="69.2583%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.41%)</title><rect x="69.0083%" y="165" width="0.4132%" height="15" fill="rgb(206,107,13)"/><text x="69.2583%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.41%)</title><rect x="69.0083%" y="149" width="0.4132%" height="15" fill="rgb(250,100,44)"/><text x="69.2583%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.41%)</title><rect x="69.0083%" y="133" width="0.4132%" height="15" fill="rgb(231,147,38)"/><text x="69.2583%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.41%)</title><rect x="69.0083%" y="117" width="0.4132%" height="15" fill="rgb(229,8,40)"/><text x="69.2583%" y="127.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (2 samples, 0.41%)</title><rect x="69.0083%" y="101" width="0.4132%" height="15" fill="rgb(221,135,30)"/><text x="69.2583%" y="111.50"></text></g><g><title>serde_json::read::next_or_eof (2 samples, 0.41%)</title><rect x="69.0083%" y="85" width="0.4132%" height="15" fill="rgb(249,193,18)"/><text x="69.2583%" y="95.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (2 samples, 0.41%)</title><rect x="69.0083%" y="69" width="0.4132%" height="15" fill="rgb(209,133,39)"/><text x="69.2583%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.21%)</title><rect x="69.2149%" y="53" width="0.2066%" height="15" fill="rgb(232,100,14)"/><text x="69.4649%" y="63.50"></text></g><g><title>serde::de::MapAccess::next_entry (21 samples, 4.34%)</title><rect x="69.0083%" y="229" width="4.3388%" height="15" fill="rgb(224,185,1)"/><text x="69.2583%" y="239.50">serde..</text></g><g><title>serde::de::MapAccess::next_entry_seed (21 samples, 4.34%)</title><rect x="69.0083%" y="213" width="4.3388%" height="15" fill="rgb(223,139,8)"/><text x="69.2583%" y="223.50">serde..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19 samples, 3.93%)</title><rect x="69.4215%" y="197" width="3.9256%" height="15" fill="rgb(232,213,38)"/><text x="69.6715%" y="207.50">&lt;ser..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 3.93%)</title><rect x="69.4215%" y="181" width="3.9256%" height="15" fill="rgb(207,94,22)"/><text x="69.6715%" y="191.50">&lt;cor..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19 samples, 3.93%)</title><rect x="69.4215%" y="165" width="3.9256%" height="15" fill="rgb(219,183,54)"/><text x="69.6715%" y="175.50">serd..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 3.93%)</title><rect x="69.4215%" y="149" width="3.9256%" height="15" fill="rgb(216,185,54)"/><text x="69.6715%" y="159.50">&lt;&amp;mu..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (19 samples, 3.93%)</title><rect x="69.4215%" y="133" width="3.9256%" height="15" fill="rgb(254,217,39)"/><text x="69.6715%" y="143.50">serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (19 samples, 3.93%)</title><rect x="69.4215%" y="117" width="3.9256%" height="15" fill="rgb(240,178,23)"/><text x="69.6715%" y="127.50">serd..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (19 samples, 3.93%)</title><rect x="69.4215%" y="101" width="3.9256%" height="15" fill="rgb(218,11,47)"/><text x="69.6715%" y="111.50">&lt;ser..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 3.93%)</title><rect x="69.4215%" y="85" width="3.9256%" height="15" fill="rgb(218,51,51)"/><text x="69.6715%" y="95.50">&lt;ser..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 3.93%)</title><rect x="69.4215%" y="69" width="3.9256%" height="15" fill="rgb(238,126,27)"/><text x="69.6715%" y="79.50">&lt;std..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (19 samples, 3.93%)</title><rect x="69.4215%" y="53" width="3.9256%" height="15" fill="rgb(249,202,22)"/><text x="69.6715%" y="63.50">&lt;std..</text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (29 samples, 5.99%)</title><rect x="68.1818%" y="485" width="5.9917%" height="15" fill="rgb(254,195,49)"/><text x="68.4318%" y="495.50">test::ru..</text></g><g><title>core::ops::function::FnOnce::call_once (29 samples, 5.99%)</title><rect x="68.1818%" y="469" width="5.9917%" height="15" fill="rgb(208,123,14)"/><text x="68.4318%" y="479.50">core::op..</text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (29 samples, 5.99%)</title><rect x="68.1818%" y="453" width="5.9917%" height="15" fill="rgb(224,200,8)"/><text x="68.4318%" y="463.50">xwords_r..</text></g><g><title>xwords_rs::tests::find_fill_works (29 samples, 5.99%)</title><rect x="68.1818%" y="437" width="5.9917%" height="15" fill="rgb(217,61,36)"/><text x="68.4318%" y="447.50">xwords_r..</text></g><g><title>xwords_rs::find_fills (29 samples, 5.99%)</title><rect x="68.1818%" y="421" width="5.9917%" height="15" fill="rgb(206,35,45)"/><text x="68.4318%" y="431.50">xwords_r..</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (29 samples, 5.99%)</title><rect x="68.1818%" y="405" width="5.9917%" height="15" fill="rgb(217,65,33)"/><text x="68.4318%" y="415.50">&lt;xwords_..</text></g><g><title>std::sync::once::Once::call_once (29 samples, 5.99%)</title><rect x="68.1818%" y="389" width="5.9917%" height="15" fill="rgb(222,158,48)"/><text x="68.4318%" y="399.50">std::syn..</text></g><g><title>std::sync::once::Once::call_inner (29 samples, 5.99%)</title><rect x="68.1818%" y="373" width="5.9917%" height="15" fill="rgb(254,2,54)"/><text x="68.4318%" y="383.50">std::syn..</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (29 samples, 5.99%)</title><rect x="68.1818%" y="357" width="5.9917%" height="15" fill="rgb(250,143,38)"/><text x="68.4318%" y="367.50">std::syn..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (29 samples, 5.99%)</title><rect x="68.1818%" y="341" width="5.9917%" height="15" fill="rgb(248,25,0)"/><text x="68.4318%" y="351.50">lazy_sta..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (29 samples, 5.99%)</title><rect x="68.1818%" y="325" width="5.9917%" height="15" fill="rgb(206,152,27)"/><text x="68.4318%" y="335.50">core::op..</text></g><g><title>serde_json::de::from_reader (25 samples, 5.17%)</title><rect x="69.0083%" y="309" width="5.1653%" height="15" fill="rgb(240,77,30)"/><text x="69.2583%" y="319.50">serde_..</text></g><g><title>serde_json::de::from_trait (25 samples, 5.17%)</title><rect x="69.0083%" y="293" width="5.1653%" height="15" fill="rgb(231,5,3)"/><text x="69.2583%" y="303.50">serde_..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (25 samples, 5.17%)</title><rect x="69.0083%" y="277" width="5.1653%" height="15" fill="rgb(207,226,32)"/><text x="69.2583%" y="287.50">serde_..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (25 samples, 5.17%)</title><rect x="69.0083%" y="261" width="5.1653%" height="15" fill="rgb(222,207,47)"/><text x="69.2583%" y="271.50">&lt;&amp;mut ..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (25 samples, 5.17%)</title><rect x="69.0083%" y="245" width="5.1653%" height="15" fill="rgb(229,115,45)"/><text x="69.2583%" y="255.50">&lt;serde..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (4 samples, 0.83%)</title><rect x="73.3471%" y="229" width="0.8264%" height="15" fill="rgb(224,191,6)"/><text x="73.5971%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (4 samples, 0.83%)</title><rect x="73.3471%" y="213" width="0.8264%" height="15" fill="rgb(230,227,24)"/><text x="73.5971%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (4 samples, 0.83%)</title><rect x="73.3471%" y="197" width="0.8264%" height="15" fill="rgb(228,80,19)"/><text x="73.5971%" y="207.50"></text></g><g><title>alloc::collections::btree::search::search_tree (4 samples, 0.83%)</title><rect x="73.3471%" y="181" width="0.8264%" height="15" fill="rgb(247,229,0)"/><text x="73.5971%" y="191.50"></text></g><g><title>alloc::collections::btree::search::search_node (4 samples, 0.83%)</title><rect x="73.3471%" y="165" width="0.8264%" height="15" fill="rgb(237,194,15)"/><text x="73.5971%" y="175.50"></text></g><g><title>alloc::collections::btree::search::search_linear (4 samples, 0.83%)</title><rect x="73.3471%" y="149" width="0.8264%" height="15" fill="rgb(219,203,20)"/><text x="73.5971%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (4 samples, 0.83%)</title><rect x="73.3471%" y="133" width="0.8264%" height="15" fill="rgb(234,128,8)"/><text x="73.5971%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.83%)</title><rect x="73.3471%" y="117" width="0.8264%" height="15" fill="rgb(248,202,8)"/><text x="73.5971%" y="127.50"></text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (4 samples, 0.83%)</title><rect x="73.3471%" y="101" width="0.8264%" height="15" fill="rgb(206,104,37)"/><text x="73.5971%" y="111.50"></text></g><g><title>&lt;u8 as core::slice::SliceOrd&gt;::compare (4 samples, 0.83%)</title><rect x="73.3471%" y="85" width="0.8264%" height="15" fill="rgb(223,8,27)"/><text x="73.5971%" y="95.50"></text></g><g><title>core::cmp::min (4 samples, 0.83%)</title><rect x="73.3471%" y="69" width="0.8264%" height="15" fill="rgb(216,217,28)"/><text x="73.5971%" y="79.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.83%)</title><rect x="73.3471%" y="53" width="0.8264%" height="15" fill="rgb(249,199,1)"/><text x="73.5971%" y="63.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.83%)</title><rect x="73.3471%" y="37" width="0.8264%" height="15" fill="rgb(240,85,17)"/><text x="73.5971%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="74.1736%" y="373" width="0.2066%" height="15" fill="rgb(206,108,45)"/><text x="74.4236%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="74.1736%" y="357" width="0.2066%" height="15" fill="rgb(245,210,41)"/><text x="74.4236%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="74.1736%" y="341" width="0.2066%" height="15" fill="rgb(206,13,37)"/><text x="74.4236%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="74.1736%" y="325" width="0.2066%" height="15" fill="rgb(250,61,18)"/><text x="74.4236%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="74.1736%" y="309" width="0.2066%" height="15" fill="rgb(235,172,48)"/><text x="74.4236%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="74.1736%" y="293" width="0.2066%" height="15" fill="rgb(249,201,17)"/><text x="74.4236%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="74.1736%" y="277" width="0.2066%" height="15" fill="rgb(219,208,6)"/><text x="74.4236%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="74.1736%" y="261" width="0.2066%" height="15" fill="rgb(248,31,23)"/><text x="74.4236%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="74.1736%" y="245" width="0.2066%" height="15" fill="rgb(245,15,42)"/><text x="74.4236%" y="255.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.21%)</title><rect x="74.1736%" y="229" width="0.2066%" height="15" fill="rgb(222,217,39)"/><text x="74.4236%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.21%)</title><rect x="74.1736%" y="213" width="0.2066%" height="15" fill="rgb(210,219,27)"/><text x="74.4236%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.21%)</title><rect x="74.1736%" y="197" width="0.2066%" height="15" fill="rgb(252,166,36)"/><text x="74.4236%" y="207.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.21%)</title><rect x="74.1736%" y="181" width="0.2066%" height="15" fill="rgb(245,132,34)"/><text x="74.4236%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.21%)</title><rect x="74.1736%" y="165" width="0.2066%" height="15" fill="rgb(236,54,3)"/><text x="74.4236%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.21%)</title><rect x="74.1736%" y="149" width="0.2066%" height="15" fill="rgb(241,173,43)"/><text x="74.4236%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.21%)</title><rect x="74.1736%" y="133" width="0.2066%" height="15" fill="rgb(215,190,9)"/><text x="74.4236%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.21%)</title><rect x="74.1736%" y="117" width="0.2066%" height="15" fill="rgb(242,101,16)"/><text x="74.4236%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.21%)</title><rect x="74.1736%" y="101" width="0.2066%" height="15" fill="rgb(223,190,21)"/><text x="74.4236%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="74.1736%" y="85" width="0.2066%" height="15" fill="rgb(215,228,25)"/><text x="74.4236%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="74.1736%" y="69" width="0.2066%" height="15" fill="rgb(225,36,22)"/><text x="74.4236%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="74.1736%" y="53" width="0.2066%" height="15" fill="rgb(251,106,46)"/><text x="74.4236%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.21%)</title><rect x="74.1736%" y="37" width="0.2066%" height="15" fill="rgb(208,90,1)"/><text x="74.4236%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.21%)</title><rect x="74.3802%" y="37" width="0.2066%" height="15" fill="rgb(243,10,4)"/><text x="74.6302%" y="47.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.41%)</title><rect x="74.3802%" y="181" width="0.4132%" height="15" fill="rgb(212,137,27)"/><text x="74.6302%" y="191.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.41%)</title><rect x="74.3802%" y="165" width="0.4132%" height="15" fill="rgb(231,220,49)"/><text x="74.6302%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.41%)</title><rect x="74.3802%" y="149" width="0.4132%" height="15" fill="rgb(237,96,20)"/><text x="74.6302%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.41%)</title><rect x="74.3802%" y="133" width="0.4132%" height="15" fill="rgb(239,229,30)"/><text x="74.6302%" y="143.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.41%)</title><rect x="74.3802%" y="117" width="0.4132%" height="15" fill="rgb(219,65,33)"/><text x="74.6302%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.41%)</title><rect x="74.3802%" y="101" width="0.4132%" height="15" fill="rgb(243,134,7)"/><text x="74.6302%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.41%)</title><rect x="74.3802%" y="85" width="0.4132%" height="15" fill="rgb(216,177,54)"/><text x="74.6302%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.41%)</title><rect x="74.3802%" y="69" width="0.4132%" height="15" fill="rgb(211,160,20)"/><text x="74.6302%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.41%)</title><rect x="74.3802%" y="53" width="0.4132%" height="15" fill="rgb(239,85,39)"/><text x="74.6302%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.21%)</title><rect x="74.5868%" y="37" width="0.2066%" height="15" fill="rgb(232,125,22)"/><text x="74.8368%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.21%)</title><rect x="74.7934%" y="37" width="0.2066%" height="15" fill="rgb(244,57,34)"/><text x="75.0434%" y="47.50"></text></g><g><title>xwords_rs::find_fills (5 samples, 1.03%)</title><rect x="74.1736%" y="485" width="1.0331%" height="15" fill="rgb(214,203,32)"/><text x="74.4236%" y="495.50"></text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (5 samples, 1.03%)</title><rect x="74.1736%" y="469" width="1.0331%" height="15" fill="rgb(207,58,43)"/><text x="74.4236%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once (5 samples, 1.03%)</title><rect x="74.1736%" y="453" width="1.0331%" height="15" fill="rgb(215,193,15)"/><text x="74.4236%" y="463.50"></text></g><g><title>std::sync::once::Once::call_inner (5 samples, 1.03%)</title><rect x="74.1736%" y="437" width="1.0331%" height="15" fill="rgb(232,15,44)"/><text x="74.4236%" y="447.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (5 samples, 1.03%)</title><rect x="74.1736%" y="421" width="1.0331%" height="15" fill="rgb(212,3,48)"/><text x="74.4236%" y="431.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (5 samples, 1.03%)</title><rect x="74.1736%" y="405" width="1.0331%" height="15" fill="rgb(218,128,7)"/><text x="74.4236%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (5 samples, 1.03%)</title><rect x="74.1736%" y="389" width="1.0331%" height="15" fill="rgb(226,216,39)"/><text x="74.4236%" y="399.50"></text></g><g><title>serde_json::de::from_reader (4 samples, 0.83%)</title><rect x="74.3802%" y="373" width="0.8264%" height="15" fill="rgb(243,47,51)"/><text x="74.6302%" y="383.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.83%)</title><rect x="74.3802%" y="357" width="0.8264%" height="15" fill="rgb(241,183,40)"/><text x="74.6302%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.83%)</title><rect x="74.3802%" y="341" width="0.8264%" height="15" fill="rgb(231,217,32)"/><text x="74.6302%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.83%)</title><rect x="74.3802%" y="325" width="0.8264%" height="15" fill="rgb(229,61,38)"/><text x="74.6302%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.83%)</title><rect x="74.3802%" y="309" width="0.8264%" height="15" fill="rgb(225,210,5)"/><text x="74.6302%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_entry (4 samples, 0.83%)</title><rect x="74.3802%" y="293" width="0.8264%" height="15" fill="rgb(231,79,45)"/><text x="74.6302%" y="303.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (4 samples, 0.83%)</title><rect x="74.3802%" y="277" width="0.8264%" height="15" fill="rgb(224,100,7)"/><text x="74.6302%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.83%)</title><rect x="74.3802%" y="261" width="0.8264%" height="15" fill="rgb(241,198,18)"/><text x="74.6302%" y="271.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.83%)</title><rect x="74.3802%" y="245" width="0.8264%" height="15" fill="rgb(252,97,53)"/><text x="74.6302%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (4 samples, 0.83%)</title><rect x="74.3802%" y="229" width="0.8264%" height="15" fill="rgb(220,88,7)"/><text x="74.6302%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (4 samples, 0.83%)</title><rect x="74.3802%" y="213" width="0.8264%" height="15" fill="rgb(213,176,14)"/><text x="74.6302%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.83%)</title><rect x="74.3802%" y="197" width="0.8264%" height="15" fill="rgb(246,73,7)"/><text x="74.6302%" y="207.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.41%)</title><rect x="74.7934%" y="181" width="0.4132%" height="15" fill="rgb(245,64,36)"/><text x="75.0434%" y="191.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (2 samples, 0.41%)</title><rect x="74.7934%" y="165" width="0.4132%" height="15" fill="rgb(245,80,10)"/><text x="75.0434%" y="175.50"></text></g><g><title>serde_json::read::next_or_eof (2 samples, 0.41%)</title><rect x="74.7934%" y="149" width="0.4132%" height="15" fill="rgb(232,107,50)"/><text x="75.0434%" y="159.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (2 samples, 0.41%)</title><rect x="74.7934%" y="133" width="0.4132%" height="15" fill="rgb(253,3,0)"/><text x="75.0434%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.41%)</title><rect x="74.7934%" y="117" width="0.4132%" height="15" fill="rgb(212,99,53)"/><text x="75.0434%" y="127.50"></text></g><g><title>core::mem::take (2 samples, 0.41%)</title><rect x="74.7934%" y="101" width="0.4132%" height="15" fill="rgb(249,111,54)"/><text x="75.0434%" y="111.50"></text></g><g><title>core::mem::replace (2 samples, 0.41%)</title><rect x="74.7934%" y="85" width="0.4132%" height="15" fill="rgb(249,55,30)"/><text x="75.0434%" y="95.50"></text></g><g><title>core::mem::swap (2 samples, 0.41%)</title><rect x="74.7934%" y="69" width="0.4132%" height="15" fill="rgb(237,47,42)"/><text x="75.0434%" y="79.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.41%)</title><rect x="74.7934%" y="53" width="0.4132%" height="15" fill="rgb(211,20,18)"/><text x="75.0434%" y="63.50"></text></g><g><title>core::ptr::read (1 samples, 0.21%)</title><rect x="75.0000%" y="37" width="0.2066%" height="15" fill="rgb(231,203,46)"/><text x="75.2500%" y="47.50"></text></g><g><title>&lt;serde_json::map::Keys as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="75.2066%" y="197" width="0.2066%" height="15" fill="rgb(237,142,3)"/><text x="75.4566%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="75.2066%" y="181" width="0.2066%" height="15" fill="rgb(241,107,1)"/><text x="75.4566%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="75.2066%" y="165" width="0.2066%" height="15" fill="rgb(229,83,13)"/><text x="75.4566%" y="175.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="75.2066%" y="149" width="0.2066%" height="15" fill="rgb(241,91,40)"/><text x="75.4566%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="75.2066%" y="133" width="0.2066%" height="15" fill="rgb(225,3,45)"/><text x="75.4566%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::replace (1 samples, 0.21%)</title><rect x="75.2066%" y="117" width="0.2066%" height="15" fill="rgb(244,223,14)"/><text x="75.4566%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (1 samples, 0.21%)</title><rect x="75.2066%" y="101" width="0.2066%" height="15" fill="rgb(224,124,37)"/><text x="75.4566%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.21%)</title><rect x="75.2066%" y="85" width="0.2066%" height="15" fill="rgb(251,171,30)"/><text x="75.4566%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (1 samples, 0.21%)</title><rect x="75.2066%" y="69" width="0.2066%" height="15" fill="rgb(236,46,54)"/><text x="75.4566%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (1 samples, 0.21%)</title><rect x="75.2066%" y="53" width="0.2066%" height="15" fill="rgb(245,213,5)"/><text x="75.4566%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.21%)</title><rect x="75.2066%" y="37" width="0.2066%" height="15" fill="rgb(230,144,27)"/><text x="75.4566%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.62%)</title><rect x="75.2066%" y="341" width="0.6198%" height="15" fill="rgb(220,86,6)"/><text x="75.4566%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.62%)</title><rect x="75.2066%" y="325" width="0.6198%" height="15" fill="rgb(240,20,13)"/><text x="75.4566%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.62%)</title><rect x="75.2066%" y="309" width="0.6198%" height="15" fill="rgb(217,89,34)"/><text x="75.4566%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.62%)</title><rect x="75.2066%" y="293" width="0.6198%" height="15" fill="rgb(229,13,5)"/><text x="75.4566%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.62%)</title><rect x="75.2066%" y="277" width="0.6198%" height="15" fill="rgb(244,67,35)"/><text x="75.4566%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.62%)</title><rect x="75.2066%" y="261" width="0.6198%" height="15" fill="rgb(221,40,2)"/><text x="75.4566%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.62%)</title><rect x="75.2066%" y="245" width="0.6198%" height="15" fill="rgb(237,157,21)"/><text x="75.4566%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.62%)</title><rect x="75.2066%" y="229" width="0.6198%" height="15" fill="rgb(222,94,11)"/><text x="75.4566%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.62%)</title><rect x="75.2066%" y="213" width="0.6198%" height="15" fill="rgb(249,113,6)"/><text x="75.4566%" y="223.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.41%)</title><rect x="75.4132%" y="197" width="0.4132%" height="15" fill="rgb(238,137,36)"/><text x="75.6632%" y="207.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.41%)</title><rect x="75.4132%" y="181" width="0.4132%" height="15" fill="rgb(210,102,26)"/><text x="75.6632%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.41%)</title><rect x="75.4132%" y="165" width="0.4132%" height="15" fill="rgb(218,30,30)"/><text x="75.6632%" y="175.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2 samples, 0.41%)</title><rect x="75.4132%" y="149" width="0.4132%" height="15" fill="rgb(214,67,26)"/><text x="75.6632%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.41%)</title><rect x="75.4132%" y="133" width="0.4132%" height="15" fill="rgb(251,9,53)"/><text x="75.6632%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.41%)</title><rect x="75.4132%" y="117" width="0.4132%" height="15" fill="rgb(228,204,25)"/><text x="75.6632%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="75.4132%" y="101" width="0.4132%" height="15" fill="rgb(207,153,8)"/><text x="75.6632%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="75.4132%" y="85" width="0.4132%" height="15" fill="rgb(242,9,16)"/><text x="75.6632%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.41%)</title><rect x="75.4132%" y="69" width="0.4132%" height="15" fill="rgb(217,211,10)"/><text x="75.6632%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.41%)</title><rect x="75.4132%" y="53" width="0.4132%" height="15" fill="rgb(219,228,52)"/><text x="75.6632%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.41%)</title><rect x="75.4132%" y="37" width="0.4132%" height="15" fill="rgb(231,92,29)"/><text x="75.6632%" y="47.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (97 samples, 20.04%)</title><rect x="75.8264%" y="53" width="20.0413%" height="15" fill="rgb(232,8,23)"/><text x="76.0764%" y="63.50">&lt;std::fs::File as std::io::Read..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (98 samples, 20.25%)</title><rect x="75.8264%" y="229" width="20.2479%" height="15" fill="rgb(216,211,34)"/><text x="76.0764%" y="239.50">&lt;serde_json::de::MapAccess&lt;R&gt; as..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (98 samples, 20.25%)</title><rect x="75.8264%" y="213" width="20.2479%" height="15" fill="rgb(236,151,0)"/><text x="76.0764%" y="223.50">&lt;core::marker::PhantomData&lt;T&gt; as..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (98 samples, 20.25%)</title><rect x="75.8264%" y="197" width="20.2479%" height="15" fill="rgb(209,168,3)"/><text x="76.0764%" y="207.50">serde::de::impls::&lt;impl serde::d..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (98 samples, 20.25%)</title><rect x="75.8264%" y="181" width="20.2479%" height="15" fill="rgb(208,129,28)"/><text x="76.0764%" y="191.50">&lt;serde_json::de::MapKey&lt;R&gt; as se..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (98 samples, 20.25%)</title><rect x="75.8264%" y="165" width="20.2479%" height="15" fill="rgb(229,78,22)"/><text x="76.0764%" y="175.50">&lt;serde_json::de::MapKey&lt;R&gt; as se..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (98 samples, 20.25%)</title><rect x="75.8264%" y="149" width="20.2479%" height="15" fill="rgb(228,187,13)"/><text x="76.0764%" y="159.50">&lt;serde_json::read::IoRead&lt;R&gt; as ..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (98 samples, 20.25%)</title><rect x="75.8264%" y="133" width="20.2479%" height="15" fill="rgb(240,119,24)"/><text x="76.0764%" y="143.50">serde_json::read::IoRead&lt;R&gt;::par..</text></g><g><title>serde_json::read::next_or_eof (98 samples, 20.25%)</title><rect x="75.8264%" y="117" width="20.2479%" height="15" fill="rgb(209,194,42)"/><text x="76.0764%" y="127.50">serde_json::read::next_or_eof</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (98 samples, 20.25%)</title><rect x="75.8264%" y="101" width="20.2479%" height="15" fill="rgb(247,200,46)"/><text x="76.0764%" y="111.50">&lt;serde_json::read::IoRead&lt;R&gt; as ..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 20.25%)</title><rect x="75.8264%" y="85" width="20.2479%" height="15" fill="rgb(218,76,16)"/><text x="76.0764%" y="95.50">&lt;serde_json::iter::LineColIterat..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 20.25%)</title><rect x="75.8264%" y="69" width="20.2479%" height="15" fill="rgb(225,21,48)"/><text x="76.0764%" y="79.50">&lt;std::io::Bytes&lt;R&gt; as core::iter..</text></g><g><title>core::slice::from_mut (1 samples, 0.21%)</title><rect x="95.8678%" y="53" width="0.2066%" height="15" fill="rgb(239,223,50)"/><text x="96.1178%" y="63.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (1 samples, 0.21%)</title><rect x="96.0744%" y="133" width="0.2066%" height="15" fill="rgb(244,45,21)"/><text x="96.3244%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (1 samples, 0.21%)</title><rect x="96.0744%" y="117" width="0.2066%" height="15" fill="rgb(232,33,43)"/><text x="96.3244%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.21%)</title><rect x="96.0744%" y="101" width="0.2066%" height="15" fill="rgb(209,8,3)"/><text x="96.3244%" y="111.50"></text></g><g><title>core::mem::take (1 samples, 0.21%)</title><rect x="96.0744%" y="85" width="0.2066%" height="15" fill="rgb(214,25,53)"/><text x="96.3244%" y="95.50"></text></g><g><title>core::mem::replace (1 samples, 0.21%)</title><rect x="96.0744%" y="69" width="0.2066%" height="15" fill="rgb(254,186,54)"/><text x="96.3244%" y="79.50"></text></g><g><title>core::mem::swap (1 samples, 0.21%)</title><rect x="96.0744%" y="53" width="0.2066%" height="15" fill="rgb(208,174,49)"/><text x="96.3244%" y="63.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.21%)</title><rect x="96.0744%" y="37" width="0.2066%" height="15" fill="rgb(233,191,51)"/><text x="96.3244%" y="47.50"></text></g><g><title>serde::de::MapAccess::next_entry (103 samples, 21.28%)</title><rect x="75.8264%" y="261" width="21.2810%" height="15" fill="rgb(222,134,10)"/><text x="76.0764%" y="271.50">serde::de::MapAccess::next_entry</text></g><g><title>serde::de::MapAccess::next_entry_seed (103 samples, 21.28%)</title><rect x="75.8264%" y="245" width="21.2810%" height="15" fill="rgb(230,226,20)"/><text x="76.0764%" y="255.50">serde::de::MapAccess::next_entry_s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5 samples, 1.03%)</title><rect x="96.0744%" y="229" width="1.0331%" height="15" fill="rgb(251,111,25)"/><text x="96.3244%" y="239.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 1.03%)</title><rect x="96.0744%" y="213" width="1.0331%" height="15" fill="rgb(224,40,46)"/><text x="96.3244%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 1.03%)</title><rect x="96.0744%" y="197" width="1.0331%" height="15" fill="rgb(236,108,47)"/><text x="96.3244%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 1.03%)</title><rect x="96.0744%" y="181" width="1.0331%" height="15" fill="rgb(234,93,0)"/><text x="96.3244%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (5 samples, 1.03%)</title><rect x="96.0744%" y="165" width="1.0331%" height="15" fill="rgb(224,213,32)"/><text x="96.3244%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (5 samples, 1.03%)</title><rect x="96.0744%" y="149" width="1.0331%" height="15" fill="rgb(251,11,48)"/><text x="96.3244%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (4 samples, 0.83%)</title><rect x="96.2810%" y="133" width="0.8264%" height="15" fill="rgb(236,173,5)"/><text x="96.5310%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.83%)</title><rect x="96.2810%" y="117" width="0.8264%" height="15" fill="rgb(230,95,12)"/><text x="96.5310%" y="127.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (4 samples, 0.83%)</title><rect x="96.2810%" y="101" width="0.8264%" height="15" fill="rgb(232,209,1)"/><text x="96.5310%" y="111.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.83%)</title><rect x="96.2810%" y="85" width="0.8264%" height="15" fill="rgb(232,6,1)"/><text x="96.5310%" y="95.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.83%)</title><rect x="96.2810%" y="69" width="0.8264%" height="15" fill="rgb(210,224,50)"/><text x="96.5310%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (4 samples, 0.83%)</title><rect x="96.2810%" y="53" width="0.8264%" height="15" fill="rgb(228,127,35)"/><text x="96.5310%" y="63.50"></text></g><g><title>xwords_rs::tests::find_fill_works::{{closure}} (113 samples, 23.35%)</title><rect x="75.2066%" y="485" width="23.3471%" height="15" fill="rgb(245,102,45)"/><text x="75.4566%" y="495.50">xwords_rs::tests::find_fill_works::{{..</text></g><g><title>xwords_rs::tests::find_fill_works (113 samples, 23.35%)</title><rect x="75.2066%" y="469" width="23.3471%" height="15" fill="rgb(214,1,49)"/><text x="75.4566%" y="479.50">xwords_rs::tests::find_fill_works</text></g><g><title>xwords_rs::find_fills (113 samples, 23.35%)</title><rect x="75.2066%" y="453" width="23.3471%" height="15" fill="rgb(226,163,40)"/><text x="75.4566%" y="463.50">xwords_rs::find_fills</text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (113 samples, 23.35%)</title><rect x="75.2066%" y="437" width="23.3471%" height="15" fill="rgb(239,212,28)"/><text x="75.4566%" y="447.50">&lt;xwords_rs::ALL_WORDS as core::ops::d..</text></g><g><title>std::sync::once::Once::call_once (113 samples, 23.35%)</title><rect x="75.2066%" y="421" width="23.3471%" height="15" fill="rgb(220,20,13)"/><text x="75.4566%" y="431.50">std::sync::once::Once::call_once</text></g><g><title>std::sync::once::Once::call_inner (113 samples, 23.35%)</title><rect x="75.2066%" y="405" width="23.3471%" height="15" fill="rgb(210,164,35)"/><text x="75.4566%" y="415.50">std::sync::once::Once::call_inner</text></g><g><title>std::sync::once::Once::call_once::{{closure}} (113 samples, 23.35%)</title><rect x="75.2066%" y="389" width="23.3471%" height="15" fill="rgb(248,109,41)"/><text x="75.4566%" y="399.50">std::sync::once::Once::call_once::{{c..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (113 samples, 23.35%)</title><rect x="75.2066%" y="373" width="23.3471%" height="15" fill="rgb(238,23,50)"/><text x="75.4566%" y="383.50">lazy_static::lazy::Lazy&lt;T&gt;::get::{{cl..</text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (113 samples, 23.35%)</title><rect x="75.2066%" y="357" width="23.3471%" height="15" fill="rgb(211,48,49)"/><text x="75.4566%" y="367.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>serde_json::de::from_reader (110 samples, 22.73%)</title><rect x="75.8264%" y="341" width="22.7273%" height="15" fill="rgb(223,36,21)"/><text x="76.0764%" y="351.50">serde_json::de::from_reader</text></g><g><title>serde_json::de::from_trait (110 samples, 22.73%)</title><rect x="75.8264%" y="325" width="22.7273%" height="15" fill="rgb(207,123,46)"/><text x="76.0764%" y="335.50">serde_json::de::from_trait</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (110 samples, 22.73%)</title><rect x="75.8264%" y="309" width="22.7273%" height="15" fill="rgb(240,218,32)"/><text x="76.0764%" y="319.50">serde_json::value::de::&lt;impl serde::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (110 samples, 22.73%)</title><rect x="75.8264%" y="293" width="22.7273%" height="15" fill="rgb(252,5,43)"/><text x="76.0764%" y="303.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (110 samples, 22.73%)</title><rect x="75.8264%" y="277" width="22.7273%" height="15" fill="rgb(252,84,19)"/><text x="76.0764%" y="287.50">&lt;serde_json::value::de::&lt;impl serde:..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (7 samples, 1.45%)</title><rect x="97.1074%" y="261" width="1.4463%" height="15" fill="rgb(243,152,39)"/><text x="97.3574%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 1.45%)</title><rect x="97.1074%" y="245" width="1.4463%" height="15" fill="rgb(234,160,15)"/><text x="97.3574%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (7 samples, 1.45%)</title><rect x="97.1074%" y="229" width="1.4463%" height="15" fill="rgb(237,34,20)"/><text x="97.3574%" y="239.50"></text></g><g><title>alloc::collections::btree::search::search_tree (7 samples, 1.45%)</title><rect x="97.1074%" y="213" width="1.4463%" height="15" fill="rgb(229,97,13)"/><text x="97.3574%" y="223.50"></text></g><g><title>alloc::collections::btree::search::search_node (7 samples, 1.45%)</title><rect x="97.1074%" y="197" width="1.4463%" height="15" fill="rgb(234,71,50)"/><text x="97.3574%" y="207.50"></text></g><g><title>alloc::collections::btree::search::search_linear (7 samples, 1.45%)</title><rect x="97.1074%" y="181" width="1.4463%" height="15" fill="rgb(253,155,4)"/><text x="97.3574%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (7 samples, 1.45%)</title><rect x="97.1074%" y="165" width="1.4463%" height="15" fill="rgb(222,185,37)"/><text x="97.3574%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (7 samples, 1.45%)</title><rect x="97.1074%" y="149" width="1.4463%" height="15" fill="rgb(251,177,13)"/><text x="97.3574%" y="159.50"></text></g><g><title>core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp (7 samples, 1.45%)</title><rect x="97.1074%" y="133" width="1.4463%" height="15" fill="rgb(250,179,40)"/><text x="97.3574%" y="143.50"></text></g><g><title>&lt;u8 as core::slice::SliceOrd&gt;::compare (7 samples, 1.45%)</title><rect x="97.1074%" y="117" width="1.4463%" height="15" fill="rgb(242,44,2)"/><text x="97.3574%" y="127.50"></text></g><g><title>core::cmp::min (7 samples, 1.45%)</title><rect x="97.1074%" y="101" width="1.4463%" height="15" fill="rgb(216,177,13)"/><text x="97.3574%" y="111.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 1.45%)</title><rect x="97.1074%" y="85" width="1.4463%" height="15" fill="rgb(216,106,43)"/><text x="97.3574%" y="95.50"></text></g><g><title>core::cmp::min_by (7 samples, 1.45%)</title><rect x="97.1074%" y="69" width="1.4463%" height="15" fill="rgb(216,183,2)"/><text x="97.3574%" y="79.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 1.45%)</title><rect x="97.1074%" y="53" width="1.4463%" height="15" fill="rgb(249,75,3)"/><text x="97.3574%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (7 samples, 1.45%)</title><rect x="97.1074%" y="37" width="1.4463%" height="15" fill="rgb(219,67,39)"/><text x="97.3574%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="98.5537%" y="357" width="0.2066%" height="15" fill="rgb(253,228,2)"/><text x="98.8037%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="98.5537%" y="341" width="0.2066%" height="15" fill="rgb(235,138,27)"/><text x="98.8037%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="98.5537%" y="325" width="0.2066%" height="15" fill="rgb(236,97,51)"/><text x="98.8037%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="98.5537%" y="309" width="0.2066%" height="15" fill="rgb(240,80,30)"/><text x="98.8037%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="98.5537%" y="293" width="0.2066%" height="15" fill="rgb(230,178,19)"/><text x="98.8037%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="98.5537%" y="277" width="0.2066%" height="15" fill="rgb(210,190,27)"/><text x="98.8037%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="98.5537%" y="261" width="0.2066%" height="15" fill="rgb(222,107,31)"/><text x="98.8037%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="98.5537%" y="245" width="0.2066%" height="15" fill="rgb(216,127,34)"/><text x="98.8037%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="98.5537%" y="229" width="0.2066%" height="15" fill="rgb(234,116,52)"/><text x="98.8037%" y="239.50"></text></g><g><title>&lt;serde_json::map::Keys as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="98.5537%" y="213" width="0.2066%" height="15" fill="rgb(222,124,15)"/><text x="98.8037%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="98.5537%" y="197" width="0.2066%" height="15" fill="rgb(231,179,28)"/><text x="98.8037%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="98.5537%" y="181" width="0.2066%" height="15" fill="rgb(226,93,45)"/><text x="98.8037%" y="191.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="98.5537%" y="165" width="0.2066%" height="15" fill="rgb(215,8,51)"/><text x="98.8037%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.21%)</title><rect x="98.5537%" y="149" width="0.2066%" height="15" fill="rgb(223,106,5)"/><text x="98.8037%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::replace (1 samples, 0.21%)</title><rect x="98.5537%" y="133" width="0.2066%" height="15" fill="rgb(250,191,5)"/><text x="98.8037%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (1 samples, 0.21%)</title><rect x="98.5537%" y="117" width="0.2066%" height="15" fill="rgb(242,132,44)"/><text x="98.8037%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1 samples, 0.21%)</title><rect x="98.5537%" y="101" width="0.2066%" height="15" fill="rgb(251,152,29)"/><text x="98.8037%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.21%)</title><rect x="98.5537%" y="85" width="0.2066%" height="15" fill="rgb(218,179,5)"/><text x="98.8037%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.21%)</title><rect x="98.5537%" y="69" width="0.2066%" height="15" fill="rgb(227,67,19)"/><text x="98.8037%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (1 samples, 0.21%)</title><rect x="98.5537%" y="53" width="0.2066%" height="15" fill="rgb(233,119,31)"/><text x="98.8037%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.21%)</title><rect x="98.7603%" y="85" width="0.2066%" height="15" fill="rgb(241,120,22)"/><text x="99.0103%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="98.7603%" y="69" width="0.2066%" height="15" fill="rgb(224,102,30)"/><text x="99.0103%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.21%)</title><rect x="98.7603%" y="53" width="0.2066%" height="15" fill="rgb(210,164,37)"/><text x="99.0103%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 0.21%)</title><rect x="98.7603%" y="37" width="0.2066%" height="15" fill="rgb(226,191,16)"/><text x="99.0103%" y="47.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.41%)</title><rect x="98.7603%" y="165" width="0.4132%" height="15" fill="rgb(214,40,45)"/><text x="99.0103%" y="175.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.41%)</title><rect x="98.7603%" y="149" width="0.4132%" height="15" fill="rgb(244,29,26)"/><text x="99.0103%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.41%)</title><rect x="98.7603%" y="133" width="0.4132%" height="15" fill="rgb(216,16,5)"/><text x="99.0103%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.41%)</title><rect x="98.7603%" y="117" width="0.4132%" height="15" fill="rgb(249,76,35)"/><text x="99.0103%" y="127.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.41%)</title><rect x="98.7603%" y="101" width="0.4132%" height="15" fill="rgb(207,11,44)"/><text x="99.0103%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.21%)</title><rect x="98.9669%" y="85" width="0.2066%" height="15" fill="rgb(228,190,49)"/><text x="99.2169%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.21%)</title><rect x="98.9669%" y="69" width="0.2066%" height="15" fill="rgb(214,173,12)"/><text x="99.2169%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.21%)</title><rect x="98.9669%" y="53" width="0.2066%" height="15" fill="rgb(218,26,35)"/><text x="99.2169%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.21%)</title><rect x="98.9669%" y="37" width="0.2066%" height="15" fill="rgb(220,200,19)"/><text x="99.2169%" y="47.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (1 samples, 0.21%)</title><rect x="99.1736%" y="69" width="0.2066%" height="15" fill="rgb(239,95,49)"/><text x="99.4236%" y="79.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.21%)</title><rect x="99.1736%" y="53" width="0.2066%" height="15" fill="rgb(235,85,53)"/><text x="99.4236%" y="63.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="99.1736%" y="101" width="0.4132%" height="15" fill="rgb(233,133,31)"/><text x="99.4236%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.41%)</title><rect x="99.1736%" y="85" width="0.4132%" height="15" fill="rgb(218,25,20)"/><text x="99.4236%" y="95.50"></text></g><g><title>core::slice::from_mut (1 samples, 0.21%)</title><rect x="99.3802%" y="69" width="0.2066%" height="15" fill="rgb(252,210,38)"/><text x="99.6302%" y="79.50"></text></g><g><title>core::slice::from_raw_parts_mut (1 samples, 0.21%)</title><rect x="99.3802%" y="53" width="0.2066%" height="15" fill="rgb(242,134,21)"/><text x="99.6302%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.21%)</title><rect x="99.3802%" y="37" width="0.2066%" height="15" fill="rgb(213,28,48)"/><text x="99.6302%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (5 samples, 1.03%)</title><rect x="98.7603%" y="245" width="1.0331%" height="15" fill="rgb(250,196,2)"/><text x="99.0103%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 1.03%)</title><rect x="98.7603%" y="229" width="1.0331%" height="15" fill="rgb(227,5,17)"/><text x="99.0103%" y="239.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (5 samples, 1.03%)</title><rect x="98.7603%" y="213" width="1.0331%" height="15" fill="rgb(221,226,24)"/><text x="99.0103%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (5 samples, 1.03%)</title><rect x="98.7603%" y="197" width="1.0331%" height="15" fill="rgb(211,5,48)"/><text x="99.0103%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 1.03%)</title><rect x="98.7603%" y="181" width="1.0331%" height="15" fill="rgb(219,150,6)"/><text x="99.0103%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 0.62%)</title><rect x="99.1736%" y="165" width="0.6198%" height="15" fill="rgb(251,46,16)"/><text x="99.4236%" y="175.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (3 samples, 0.62%)</title><rect x="99.1736%" y="149" width="0.6198%" height="15" fill="rgb(220,204,40)"/><text x="99.4236%" y="159.50"></text></g><g><title>serde_json::read::next_or_eof (3 samples, 0.62%)</title><rect x="99.1736%" y="133" width="0.6198%" height="15" fill="rgb(211,85,2)"/><text x="99.4236%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (3 samples, 0.62%)</title><rect x="99.1736%" y="117" width="0.6198%" height="15" fill="rgb(229,17,7)"/><text x="99.4236%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.21%)</title><rect x="99.5868%" y="101" width="0.2066%" height="15" fill="rgb(239,72,28)"/><text x="99.8368%" y="111.50"></text></g><g><title>core::mem::take (1 samples, 0.21%)</title><rect x="99.5868%" y="85" width="0.2066%" height="15" fill="rgb(230,47,54)"/><text x="99.8368%" y="95.50"></text></g><g><title>core::mem::replace (1 samples, 0.21%)</title><rect x="99.5868%" y="69" width="0.2066%" height="15" fill="rgb(214,50,8)"/><text x="99.8368%" y="79.50"></text></g><g><title>core::mem::swap (1 samples, 0.21%)</title><rect x="99.5868%" y="53" width="0.2066%" height="15" fill="rgb(216,198,43)"/><text x="99.8368%" y="63.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.21%)</title><rect x="99.5868%" y="37" width="0.2066%" height="15" fill="rgb(234,20,35)"/><text x="99.8368%" y="47.50"></text></g><g><title>all (484 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(254,45,19)"/><text x="0.2500%" y="527.50"></text></g><g><title>tests::find_fil (354 samples, 73.14%)</title><rect x="26.8595%" y="501" width="73.1405%" height="15" fill="rgb(219,14,44)"/><text x="27.1095%" y="511.50">tests::find_fil</text></g><g><title>xwords_rs::tests::find_fill_works (7 samples, 1.45%)</title><rect x="98.5537%" y="485" width="1.4463%" height="15" fill="rgb(217,220,26)"/><text x="98.8037%" y="495.50"></text></g><g><title>xwords_rs::find_fills (7 samples, 1.45%)</title><rect x="98.5537%" y="469" width="1.4463%" height="15" fill="rgb(213,158,28)"/><text x="98.8037%" y="479.50"></text></g><g><title>&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__stability/lazy_static::lazy::Lazy&lt;T&gt;::get (7 samples, 1.45%)</title><rect x="98.5537%" y="453" width="1.4463%" height="15" fill="rgb(252,51,52)"/><text x="98.8037%" y="463.50"></text></g><g><title>std::sync::once::Once::call_once (7 samples, 1.45%)</title><rect x="98.5537%" y="437" width="1.4463%" height="15" fill="rgb(246,89,16)"/><text x="98.8037%" y="447.50"></text></g><g><title>std::sync::once::Once::call_inner (7 samples, 1.45%)</title><rect x="98.5537%" y="421" width="1.4463%" height="15" fill="rgb(216,158,49)"/><text x="98.8037%" y="431.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (7 samples, 1.45%)</title><rect x="98.5537%" y="405" width="1.4463%" height="15" fill="rgb(236,107,19)"/><text x="98.8037%" y="415.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (7 samples, 1.45%)</title><rect x="98.5537%" y="389" width="1.4463%" height="15" fill="rgb(228,185,30)"/><text x="98.8037%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once/&lt;xwords_rs::ALL_WORDS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (7 samples, 1.45%)</title><rect x="98.5537%" y="373" width="1.4463%" height="15" fill="rgb(246,134,8)"/><text x="98.8037%" y="383.50"></text></g><g><title>serde_json::de::from_reader (6 samples, 1.24%)</title><rect x="98.7603%" y="357" width="1.2397%" height="15" fill="rgb(214,143,50)"/><text x="99.0103%" y="367.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 1.24%)</title><rect x="98.7603%" y="341" width="1.2397%" height="15" fill="rgb(228,75,8)"/><text x="99.0103%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 1.24%)</title><rect x="98.7603%" y="325" width="1.2397%" height="15" fill="rgb(207,175,4)"/><text x="99.0103%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 1.24%)</title><rect x="98.7603%" y="309" width="1.2397%" height="15" fill="rgb(205,108,24)"/><text x="99.0103%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 1.24%)</title><rect x="98.7603%" y="293" width="1.2397%" height="15" fill="rgb(244,120,49)"/><text x="99.0103%" y="303.50"></text></g><g><title>serde::de::MapAccess::next_entry (6 samples, 1.24%)</title><rect x="98.7603%" y="277" width="1.2397%" height="15" fill="rgb(223,47,38)"/><text x="99.0103%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 1.24%)</title><rect x="98.7603%" y="261" width="1.2397%" height="15" fill="rgb(229,179,11)"/><text x="99.0103%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.21%)</title><rect x="99.7934%" y="245" width="0.2066%" height="15" fill="rgb(231,122,1)"/><text x="100.0434%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.21%)</title><rect x="99.7934%" y="229" width="0.2066%" height="15" fill="rgb(245,119,9)"/><text x="100.0434%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.21%)</title><rect x="99.7934%" y="213" width="0.2066%" height="15" fill="rgb(241,163,25)"/><text x="100.0434%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.21%)</title><rect x="99.7934%" y="197" width="0.2066%" height="15" fill="rgb(217,214,3)"/><text x="100.0434%" y="207.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.21%)</title><rect x="99.7934%" y="181" width="0.2066%" height="15" fill="rgb(240,86,28)"/><text x="100.0434%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.21%)</title><rect x="99.7934%" y="165" width="0.2066%" height="15" fill="rgb(215,47,9)"/><text x="100.0434%" y="175.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.21%)</title><rect x="99.7934%" y="149" width="0.2066%" height="15" fill="rgb(252,25,45)"/><text x="100.0434%" y="159.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.21%)</title><rect x="99.7934%" y="133" width="0.2066%" height="15" fill="rgb(251,164,9)"/><text x="100.0434%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.21%)</title><rect x="99.7934%" y="117" width="0.2066%" height="15" fill="rgb(233,194,0)"/><text x="100.0434%" y="127.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="99.7934%" y="101" width="0.2066%" height="15" fill="rgb(249,111,24)"/><text x="100.0434%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="99.7934%" y="85" width="0.2066%" height="15" fill="rgb(250,223,3)"/><text x="100.0434%" y="95.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read/std::sys::unix::fs::File::read/std::sys::unix::fd::FileDesc::read (1 samples, 0.21%)</title><rect x="99.7934%" y="69" width="0.2066%" height="15" fill="rgb(236,178,37)"/><text x="100.0434%" y="79.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.21%)</title><rect x="99.7934%" y="53" width="0.2066%" height="15" fill="rgb(241,158,50)"/><text x="100.0434%" y="63.50"></text></g></svg></svg>